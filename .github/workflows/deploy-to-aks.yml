name: Deploy to Azure Kubernetes Service

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AZURE_CONTAINER_REGISTRY: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}
  APP_HOSTNAME: ${{ secrets.APP_HOSTNAME }}
  API_HOSTNAME: ${{ secrets.API_HOSTNAME }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Azure
        run: |
          az login --username ${{ secrets.AZURE_USERNAME }} --password ${{ secrets.AZURE_PASSWORD }}
        shell: bash

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Set image tags
        run: echo "IMAGE_TAG=$(date +'%Y%m%d%H%M%S')-${GITHUB_SHA::8}" >> $GITHUB_ENV

      # Build and push microservices
      - name: Build and push recflux-tools-accessibility-service
        uses: docker/build-push-action@v4
        with:
          context: ./recflux-tools-accessibility-service
          push: true
          tags: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/recflux-tools-accessibility-service:${{ env.IMAGE_TAG }}
          cache-from: type=registry,ref=${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/recflux-tools-accessibility-service:latest
          cache-to: type=inline

      - name: Build and push kafka-producer-service
        uses: docker/build-push-action@v4
        with:
          context: ./kafka-producer-service
          push: true
          tags: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/kafka-producer-service:${{ env.IMAGE_TAG }}
          cache-from: type=registry,ref=${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/kafka-producer-service:latest
          cache-to: type=inline

      - name: Build and push agentic-structured-service
        uses: docker/build-push-action@v4
        with:
          context: ./agentic-structured-service
          push: true
          tags: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/agentic-structured-service:${{ env.IMAGE_TAG }}
          cache-from: type=registry,ref=${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/agentic-structured-service:latest
          cache-to: type=inline

      - name: Build and push code-deploy-service
        uses: docker/build-push-action@v4
        with:
          context: ./code-deploy-service
          push: true
          tags: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/code-deploy-service:${{ env.IMAGE_TAG }}
          cache-from: type=registry,ref=${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/code-deploy-service:latest
          cache-to: type=inline

      - name: Build and push Next.js app
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.nextjs
          push: true
          tags: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/nextjs-app:${{ env.IMAGE_TAG }}
          cache-from: type=registry,ref=${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/nextjs-app:latest
          cache-to: type=inline
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
            STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY }}
            NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
            STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}
            THUMBNAIL_API_KEY=${{ secrets.THUMBNAIL_API_KEY }}
            OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            NEXT_PUBLIC_GOOGLE_CLIENT_ID=${{ secrets.NEXT_PUBLIC_GOOGLE_CLIENT_ID }}
            NEXT_PUBLIC_GOOGLE_CLIENT_ID_ANDROID=${{ secrets.NEXT_PUBLIC_GOOGLE_CLIENT_ID_ANDROID }}
            SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
            KAFKA_BROKERS=${{ secrets.KAFKA_BROKERS }}
            VERCEL_TOKEN=${{ secrets.VERCEL_TOKEN }}

      - name: Debug secrets
        run: |
          echo "Supabase URL length: $(echo -n "${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" | wc -c)"
          echo "Service Role Key length: $(echo -n "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" | wc -c)"
          echo "Anon Key length: $(echo -n "${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" | wc -c)"
          echo "OpenAI Key length: $(echo -n "${{ secrets.OPENAI_API_KEY }}" | wc -c)"
          echo "Stripe Secret Key length: $(echo -n "${{ secrets.STRIPE_SECRET_KEY }}" | wc -c)"
          echo "Stripe Secret Key starts with: $(echo -n "${{ secrets.STRIPE_SECRET_KEY }}" | cut -c1-7)"

      # Set up kubectl
      - name: Set up kubeconfig
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}

      # Create Kubernetes secrets
      - name: Create Kubernetes secrets
        run: |
          # Delete existing secret if it exists
          kubectl delete secret app-secrets --ignore-not-found=true
          
          # Create the secret
          kubectl create secret generic app-secrets \
            --from-literal=KAFKA_BROKERS="${{ secrets.KAFKA_BROKERS }}" \
            --from-literal=NEXT_PUBLIC_GOOGLE_CLIENT_ID="${{ secrets.NEXT_PUBLIC_GOOGLE_CLIENT_ID }}" \
            --from-literal=NEXT_PUBLIC_GOOGLE_CLIENT_ID_ANDROID="${{ secrets.NEXT_PUBLIC_GOOGLE_CLIENT_ID_ANDROID }}" \
            --from-literal=NEXT_PUBLIC_SUPABASE_ANON_KEY="${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" \
            --from-literal=NEXT_PUBLIC_SUPABASE_URL="${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" \
            --from-literal=OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            --from-literal=OPENROUTER_API_KEY="${{ secrets.OPENROUTER_API_KEY }}" \
            --from-literal=STRIPE_SECRET_KEY="${{ secrets.STRIPE_SECRET_KEY }}" \
            --from-literal=STRIPE_WEBHOOK_SECRET="${{ secrets.STRIPE_WEBHOOK_SECRET }}" \
            --from-literal=SUPABASE_SERVICE_ROLE_KEY="${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
            --from-literal=THUMBNAIL_API_KEY="${{ secrets.THUMBNAIL_API_KEY }}" \
            --from-literal=VERCEL_TOKEN="${{ secrets.VERCEL_TOKEN }}" \
            --from-literal=AGENTIC_STRUCTURED_LB_URL="${{ secrets.AGENTIC_STRUCTURED_LB_URL }}"
          
          # Verify secret was created
          echo "Secret created. Checking contents..."
          kubectl get secret app-secrets -o yaml

      # Delete all existing deployments to ensure clean deployment
      - name: Delete existing deployments
        run: |
          echo "Deleting all existing deployments..."
          kubectl delete deployment --all
          echo "All deployments deleted."

      # Apply Kubernetes manifests
      - name: Deploy to AKS
        run: |
          # Replace placeholders in manifests
          find k8s/manifests -type f -name "*.yaml" -exec sed -i "s|\${CONTAINER_REGISTRY}|${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io|g" {} \;
          find k8s/manifests -type f -name "*.yaml" -exec sed -i "s|\${IMAGE_TAG}|${{ env.IMAGE_TAG }}|g" {} \;
          find k8s/manifests -type f -name "*.yaml" -exec sed -i "s|\${APP_HOSTNAME}|${{ env.APP_HOSTNAME }}|g" {} \;
          find k8s/manifests -type f -name "*.yaml" -exec sed -i "s|\${API_HOSTNAME}|${{ env.API_HOSTNAME }}|g" {} \;
          
          # Apply manifests using kustomize
          kubectl apply -k k8s/manifests

      # Verify deployment
      - name: Verify deployment
        run: |
          kubectl get pods
          kubectl get services
          kubectl get ingress
          echo "Checking load balancer service..."
          kubectl get service unified-services-lb
          echo "Checking lb-proxy deployment..."
          kubectl get deployment lb-proxy

  build-flutter-apk:
    name: Build Flutter Release APK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Decode Android Keystore
        id: decode_keystore
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: recflux_devtools_app/android/app/upload-keystore.jks
          encodedString: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}

      - name: Create key.properties file
        run: |
          echo "storeFile=${{ steps.decode_keystore.outputs.filePath }}" > recflux_devtools_app/android/key.properties
          echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> recflux_devtools_app/android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> recflux_devtools_app/android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> recflux_devtools_app/android/key.properties
        shell: bash

      - name: Build Flutter APK
        run: |
          cd recflux_devtools_app
          flutter pub get
          flutter build apk --release
        shell: bash

      - name: Upload APK as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: release-apk
          path: recflux_devtools_app/build/app/outputs/apk/release/app-release.apk
          retention-days: 7 