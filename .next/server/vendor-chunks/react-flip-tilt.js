"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-flip-tilt";
exports.ids = ["vendor-chunks/react-flip-tilt"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-flip-tilt/dist/react-flip-tilt.js":
/*!**************************************************************!*\
  !*** ./node_modules/react-flip-tilt/dist/react-flip-tilt.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FlipTilt: () => (/* binding */ gr),\n/* harmony export */   \"default\": () => (/* binding */ gr)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var framer_motion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! framer-motion */ \"(ssr)/./node_modules/framer-motion/dist/es/value/use-motion-value.mjs\");\n/* harmony import */ var framer_motion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! framer-motion */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/animate.mjs\");\n/* harmony import */ var framer_motion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! framer-motion */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/motion.mjs\");\n\n\nvar St = {\n    exports: {}\n}, ut = {};\n/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var Ot;\nfunction Kt() {\n    if (Ot) return ut;\n    Ot = 1;\n    var o = react__WEBPACK_IMPORTED_MODULE_0__, u = Symbol.for(\"react.element\"), k = Symbol.for(\"react.fragment\"), d = Object.prototype.hasOwnProperty, R = o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, _ = {\n        key: !0,\n        ref: !0,\n        __self: !0,\n        __source: !0\n    };\n    function Y(j, f, X) {\n        var g, F = {}, x = null, Q = null;\n        X !== void 0 && (x = \"\" + X), f.key !== void 0 && (x = \"\" + f.key), f.ref !== void 0 && (Q = f.ref);\n        for(g in f)d.call(f, g) && !_.hasOwnProperty(g) && (F[g] = f[g]);\n        if (j && j.defaultProps) for(g in f = j.defaultProps, f)F[g] === void 0 && (F[g] = f[g]);\n        return {\n            $$typeof: u,\n            type: j,\n            key: x,\n            ref: Q,\n            props: F,\n            _owner: R.current\n        };\n    }\n    return ut.Fragment = k, ut.jsx = Y, ut.jsxs = Y, ut;\n}\nvar ft = {};\n/**\n * @license React\n * react-jsx-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var xt;\nfunction Qt() {\n    return xt || (xt = 1,  true && function() {\n        var o = react__WEBPACK_IMPORTED_MODULE_0__, u = Symbol.for(\"react.element\"), k = Symbol.for(\"react.portal\"), d = Symbol.for(\"react.fragment\"), R = Symbol.for(\"react.strict_mode\"), _ = Symbol.for(\"react.profiler\"), Y = Symbol.for(\"react.provider\"), j = Symbol.for(\"react.context\"), f = Symbol.for(\"react.forward_ref\"), X = Symbol.for(\"react.suspense\"), g = Symbol.for(\"react.suspense_list\"), F = Symbol.for(\"react.memo\"), x = Symbol.for(\"react.lazy\"), Q = Symbol.for(\"react.offscreen\"), Me = Symbol.iterator, he = \"@@iterator\";\n        function Se(e) {\n            if (e === null || typeof e != \"object\") return null;\n            var t = Me && e[Me] || e[he];\n            return typeof t == \"function\" ? t : null;\n        }\n        var U = o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        function v(e) {\n            {\n                for(var t = arguments.length, r = new Array(t > 1 ? t - 1 : 0), n = 1; n < t; n++)r[n - 1] = arguments[n];\n                Ne(\"error\", e, r);\n            }\n        }\n        function Ne(e, t, r) {\n            {\n                var n = U.ReactDebugCurrentFrame, l = n.getStackAddendum();\n                l !== \"\" && (t += \"%s\", r = r.concat([\n                    l\n                ]));\n                var c = r.map(function(s) {\n                    return String(s);\n                });\n                c.unshift(\"Warning: \" + t), Function.prototype.apply.call(console[e], console, c);\n            }\n        }\n        var Te = !1, je = !1, Ge = !1, be = !1, ze = !1, Ee;\n        Ee = Symbol.for(\"react.module.reference\");\n        function J(e) {\n            return !!(typeof e == \"string\" || typeof e == \"function\" || e === d || e === _ || ze || e === R || e === X || e === g || be || e === Q || Te || je || Ge || typeof e == \"object\" && e !== null && (e.$$typeof === x || e.$$typeof === F || e.$$typeof === Y || e.$$typeof === j || e.$$typeof === f || // This needs to include all possible module reference object\n            // types supported by any Flight configuration anywhere since\n            // we don't know which Flight build this will end up being used\n            // with.\n            e.$$typeof === Ee || e.getModuleId !== void 0));\n        }\n        function Z(e, t, r) {\n            var n = e.displayName;\n            if (n) return n;\n            var l = t.displayName || t.name || \"\";\n            return l !== \"\" ? r + \"(\" + l + \")\" : r;\n        }\n        function B(e) {\n            return e.displayName || \"Context\";\n        }\n        function M(e) {\n            if (e == null) return null;\n            if (typeof e.tag == \"number\" && v(\"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"), typeof e == \"function\") return e.displayName || e.name || null;\n            if (typeof e == \"string\") return e;\n            switch(e){\n                case d:\n                    return \"Fragment\";\n                case k:\n                    return \"Portal\";\n                case _:\n                    return \"Profiler\";\n                case R:\n                    return \"StrictMode\";\n                case X:\n                    return \"Suspense\";\n                case g:\n                    return \"SuspenseList\";\n            }\n            if (typeof e == \"object\") switch(e.$$typeof){\n                case j:\n                    var t = e;\n                    return B(t) + \".Consumer\";\n                case Y:\n                    var r = e;\n                    return B(r._context) + \".Provider\";\n                case f:\n                    return Z(e, e.render, \"ForwardRef\");\n                case F:\n                    var n = e.displayName || null;\n                    return n !== null ? n : M(e.type) || \"Memo\";\n                case x:\n                    {\n                        var l = e, c = l._payload, s = l._init;\n                        try {\n                            return M(s(c));\n                        } catch  {\n                            return null;\n                        }\n                    }\n            }\n            return null;\n        }\n        var N = Object.assign, P = 0, K, D, Fe, ae, ie, De, z;\n        function V() {}\n        V.__reactDisabledLog = !0;\n        function Oe() {\n            {\n                if (P === 0) {\n                    K = console.log, D = console.info, Fe = console.warn, ae = console.error, ie = console.group, De = console.groupCollapsed, z = console.groupEnd;\n                    var e = {\n                        configurable: !0,\n                        enumerable: !0,\n                        value: V,\n                        writable: !0\n                    };\n                    Object.defineProperties(console, {\n                        info: e,\n                        log: e,\n                        warn: e,\n                        error: e,\n                        group: e,\n                        groupCollapsed: e,\n                        groupEnd: e\n                    });\n                }\n                P++;\n            }\n        }\n        function A() {\n            {\n                if (P--, P === 0) {\n                    var e = {\n                        configurable: !0,\n                        enumerable: !0,\n                        writable: !0\n                    };\n                    Object.defineProperties(console, {\n                        log: N({}, e, {\n                            value: K\n                        }),\n                        info: N({}, e, {\n                            value: D\n                        }),\n                        warn: N({}, e, {\n                            value: Fe\n                        }),\n                        error: N({}, e, {\n                            value: ae\n                        }),\n                        group: N({}, e, {\n                            value: ie\n                        }),\n                        groupCollapsed: N({}, e, {\n                            value: De\n                        }),\n                        groupEnd: N({}, e, {\n                            value: z\n                        })\n                    });\n                }\n                P < 0 && v(\"disabledDepth fell below zero. This is a bug in React. Please file an issue.\");\n            }\n        }\n        var ye = U.ReactCurrentDispatcher, ne;\n        function ue(e, t, r) {\n            {\n                if (ne === void 0) try {\n                    throw Error();\n                } catch (l) {\n                    var n = l.stack.trim().match(/\\n( *(at )?)/);\n                    ne = n && n[1] || \"\";\n                }\n                return `\n` + ne + e;\n            }\n        }\n        var $ = !1, I;\n        {\n            var we = typeof WeakMap == \"function\" ? WeakMap : Map;\n            I = new we();\n        }\n        function Ae(e, t) {\n            if (!e || $) return \"\";\n            {\n                var r = I.get(e);\n                if (r !== void 0) return r;\n            }\n            var n;\n            $ = !0;\n            var l = Error.prepareStackTrace;\n            Error.prepareStackTrace = void 0;\n            var c;\n            c = ye.current, ye.current = null, Oe();\n            try {\n                if (t) {\n                    var s = function() {\n                        throw Error();\n                    };\n                    if (Object.defineProperty(s.prototype, \"props\", {\n                        set: function() {\n                            throw Error();\n                        }\n                    }), typeof Reflect == \"object\" && Reflect.construct) {\n                        try {\n                            Reflect.construct(s, []);\n                        } catch (q) {\n                            n = q;\n                        }\n                        Reflect.construct(e, [], s);\n                    } else {\n                        try {\n                            s.call();\n                        } catch (q) {\n                            n = q;\n                        }\n                        e.call(s.prototype);\n                    }\n                } else {\n                    try {\n                        throw Error();\n                    } catch (q) {\n                        n = q;\n                    }\n                    e();\n                }\n            } catch (q) {\n                if (q && n && typeof q.stack == \"string\") {\n                    for(var a = q.stack.split(`\n`), O = n.stack.split(`\n`), y = a.length - 1, m = O.length - 1; y >= 1 && m >= 0 && a[y] !== O[m];)m--;\n                    for(; y >= 1 && m >= 0; y--, m--)if (a[y] !== O[m]) {\n                        if (y !== 1 || m !== 1) do if (y--, m--, m < 0 || a[y] !== O[m]) {\n                            var L = `\n` + a[y].replace(\" at new \", \" at \");\n                            return e.displayName && L.includes(\"<anonymous>\") && (L = L.replace(\"<anonymous>\", e.displayName)), typeof e == \"function\" && I.set(e, L), L;\n                        }\n                        while (y >= 1 && m >= 0);\n                        break;\n                    }\n                }\n            } finally{\n                $ = !1, ye.current = c, A(), Error.prepareStackTrace = l;\n            }\n            var ge = e ? e.displayName || e.name : \"\", tt = ge ? ue(ge) : \"\";\n            return typeof e == \"function\" && I.set(e, tt), tt;\n        }\n        function W(e, t, r) {\n            return Ae(e, !1);\n        }\n        function E(e) {\n            var t = e.prototype;\n            return !!(t && t.isReactComponent);\n        }\n        function b(e, t, r) {\n            if (e == null) return \"\";\n            if (typeof e == \"function\") return Ae(e, E(e));\n            if (typeof e == \"string\") return ue(e);\n            switch(e){\n                case X:\n                    return ue(\"Suspense\");\n                case g:\n                    return ue(\"SuspenseList\");\n            }\n            if (typeof e == \"object\") switch(e.$$typeof){\n                case f:\n                    return W(e.render);\n                case F:\n                    return b(e.type, t, r);\n                case x:\n                    {\n                        var n = e, l = n._payload, c = n._init;\n                        try {\n                            return b(c(l), t, r);\n                        } catch  {}\n                    }\n            }\n            return \"\";\n        }\n        var w = Object.prototype.hasOwnProperty, oe = {}, h = U.ReactDebugCurrentFrame;\n        function T(e) {\n            if (e) {\n                var t = e._owner, r = b(e.type, e._source, t ? t.type : null);\n                h.setExtraStackFrame(r);\n            } else h.setExtraStackFrame(null);\n        }\n        function ke(e, t, r, n, l) {\n            {\n                var c = Function.call.bind(w);\n                for(var s in e)if (c(e, s)) {\n                    var a = void 0;\n                    try {\n                        if (typeof e[s] != \"function\") {\n                            var O = Error((n || \"React class\") + \": \" + r + \" type `\" + s + \"` is invalid; it must be a function, usually from the `prop-types` package, but received `\" + typeof e[s] + \"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                            throw O.name = \"Invariant Violation\", O;\n                        }\n                        a = e[s](t, s, n, r, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n                    } catch (y) {\n                        a = y;\n                    }\n                    a && !(a instanceof Error) && (T(l), v(\"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).\", n || \"React class\", r, s, typeof a), T(null)), a instanceof Error && !(a.message in oe) && (oe[a.message] = !0, T(l), v(\"Failed %s type: %s\", r, a.message), T(null));\n                }\n            }\n        }\n        var Re = Array.isArray;\n        function Ie(e) {\n            return Re(e);\n        }\n        function Qe(e) {\n            {\n                var t = typeof Symbol == \"function\" && Symbol.toStringTag, r = t && e[Symbol.toStringTag] || e.constructor.name || \"Object\";\n                return r;\n            }\n        }\n        function Je(e) {\n            try {\n                return G(e), !1;\n            } catch  {\n                return !0;\n            }\n        }\n        function G(e) {\n            return \"\" + e;\n        }\n        function xe(e) {\n            if (Je(e)) return v(\"The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.\", Qe(e)), G(e);\n        }\n        var H = U.ReactCurrentOwner, _e = {\n            key: !0,\n            ref: !0,\n            __self: !0,\n            __source: !0\n        }, se, ee, te;\n        te = {};\n        function Ze(e) {\n            if (w.call(e, \"ref\")) {\n                var t = Object.getOwnPropertyDescriptor(e, \"ref\").get;\n                if (t && t.isReactWarning) return !1;\n            }\n            return e.ref !== void 0;\n        }\n        function et(e) {\n            if (w.call(e, \"key\")) {\n                var t = Object.getOwnPropertyDescriptor(e, \"key\").get;\n                if (t && t.isReactWarning) return !1;\n            }\n            return e.key !== void 0;\n        }\n        function qe(e, t) {\n            if (typeof e.ref == \"string\" && H.current && t && H.current.stateNode !== t) {\n                var r = M(H.current.type);\n                te[r] || (v('Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', M(H.current.type), e.ref), te[r] = !0);\n            }\n        }\n        function Ke(e, t) {\n            {\n                var r = function() {\n                    se || (se = !0, v(\"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", t));\n                };\n                r.isReactWarning = !0, Object.defineProperty(e, \"key\", {\n                    get: r,\n                    configurable: !0\n                });\n            }\n        }\n        function le(e, t) {\n            {\n                var r = function() {\n                    ee || (ee = !0, v(\"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", t));\n                };\n                r.isReactWarning = !0, Object.defineProperty(e, \"ref\", {\n                    get: r,\n                    configurable: !0\n                });\n            }\n        }\n        var fe = function(e, t, r, n, l, c, s) {\n            var a = {\n                // This tag allows us to uniquely identify this as a React Element\n                $$typeof: u,\n                // Built-in properties that belong on the element\n                type: e,\n                key: t,\n                ref: r,\n                props: s,\n                // Record the component responsible for creating this element.\n                _owner: c\n            };\n            return a._store = {}, Object.defineProperty(a._store, \"validated\", {\n                configurable: !1,\n                enumerable: !1,\n                writable: !0,\n                value: !1\n            }), Object.defineProperty(a, \"_self\", {\n                configurable: !1,\n                enumerable: !1,\n                writable: !1,\n                value: n\n            }), Object.defineProperty(a, \"_source\", {\n                configurable: !1,\n                enumerable: !1,\n                writable: !1,\n                value: l\n            }), Object.freeze && (Object.freeze(a.props), Object.freeze(a)), a;\n        };\n        function Le(e, t, r, n, l) {\n            {\n                var c, s = {}, a = null, O = null;\n                r !== void 0 && (xe(r), a = \"\" + r), et(t) && (xe(t.key), a = \"\" + t.key), Ze(t) && (O = t.ref, qe(t, l));\n                for(c in t)w.call(t, c) && !_e.hasOwnProperty(c) && (s[c] = t[c]);\n                if (e && e.defaultProps) {\n                    var y = e.defaultProps;\n                    for(c in y)s[c] === void 0 && (s[c] = y[c]);\n                }\n                if (a || O) {\n                    var m = typeof e == \"function\" ? e.displayName || e.name || \"Unknown\" : e;\n                    a && Ke(s, m), O && le(s, m);\n                }\n                return fe(e, a, O, l, n, H.current, s);\n            }\n        }\n        var pe = U.ReactCurrentOwner, me = U.ReactDebugCurrentFrame;\n        function re(e) {\n            if (e) {\n                var t = e._owner, r = b(e.type, e._source, t ? t.type : null);\n                me.setExtraStackFrame(r);\n            } else me.setExtraStackFrame(null);\n        }\n        var de;\n        de = !1;\n        function ce(e) {\n            return typeof e == \"object\" && e !== null && e.$$typeof === u;\n        }\n        function ve() {\n            {\n                if (pe.current) {\n                    var e = M(pe.current.type);\n                    if (e) return `\n\nCheck the render method of \\`` + e + \"`.\";\n                }\n                return \"\";\n            }\n        }\n        function Be(e) {\n            {\n                if (e !== void 0) {\n                    var t = e.fileName.replace(/^.*[\\\\\\/]/, \"\"), r = e.lineNumber;\n                    return `\n\nCheck your code at ` + t + \":\" + r + \".\";\n                }\n                return \"\";\n            }\n        }\n        var $e = {};\n        function Ye(e) {\n            {\n                var t = ve();\n                if (!t) {\n                    var r = typeof e == \"string\" ? e : e.displayName || e.name;\n                    r && (t = `\n\nCheck the top-level render call using <` + r + \">.\");\n                }\n                return t;\n            }\n        }\n        function Pe(e, t) {\n            {\n                if (!e._store || e._store.validated || e.key != null) return;\n                e._store.validated = !0;\n                var r = Ye(t);\n                if ($e[r]) return;\n                $e[r] = !0;\n                var n = \"\";\n                e && e._owner && e._owner !== pe.current && (n = \" It was passed a child from \" + M(e._owner.type) + \".\"), re(e), v('Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', r, n), re(null);\n            }\n        }\n        function Ce(e, t) {\n            {\n                if (typeof e != \"object\") return;\n                if (Ie(e)) for(var r = 0; r < e.length; r++){\n                    var n = e[r];\n                    ce(n) && Pe(n, t);\n                }\n                else if (ce(e)) e._store && (e._store.validated = !0);\n                else if (e) {\n                    var l = Se(e);\n                    if (typeof l == \"function\" && l !== e.entries) for(var c = l.call(e), s; !(s = c.next()).done;)ce(s.value) && Pe(s.value, t);\n                }\n            }\n        }\n        function Xe(e) {\n            {\n                var t = e.type;\n                if (t == null || typeof t == \"string\") return;\n                var r;\n                if (typeof t == \"function\") r = t.propTypes;\n                else if (typeof t == \"object\" && (t.$$typeof === f || // Note: Memo only checks outer props here.\n                // Inner props are checked in the reconciler.\n                t.$$typeof === F)) r = t.propTypes;\n                else return;\n                if (r) {\n                    var n = M(t);\n                    ke(r, e.props, \"prop\", n, e);\n                } else if (t.PropTypes !== void 0 && !de) {\n                    de = !0;\n                    var l = M(t);\n                    v(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", l || \"Unknown\");\n                }\n                typeof t.getDefaultProps == \"function\" && !t.getDefaultProps.isReactClassApproved && v(\"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.\");\n            }\n        }\n        function We(e) {\n            {\n                for(var t = Object.keys(e.props), r = 0; r < t.length; r++){\n                    var n = t[r];\n                    if (n !== \"children\" && n !== \"key\") {\n                        re(e), v(\"Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.\", n), re(null);\n                        break;\n                    }\n                }\n                e.ref !== null && (re(e), v(\"Invalid attribute `ref` supplied to `React.Fragment`.\"), re(null));\n            }\n        }\n        function Ue(e, t, r, n, l, c) {\n            {\n                var s = J(e);\n                if (!s) {\n                    var a = \"\";\n                    (e === void 0 || typeof e == \"object\" && e !== null && Object.keys(e).length === 0) && (a += \" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\");\n                    var O = Be(l);\n                    O ? a += O : a += ve();\n                    var y;\n                    e === null ? y = \"null\" : Ie(e) ? y = \"array\" : e !== void 0 && e.$$typeof === u ? (y = \"<\" + (M(e.type) || \"Unknown\") + \" />\", a = \" Did you accidentally export a JSX literal instead of a component?\") : y = typeof e, v(\"React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s\", y, a);\n                }\n                var m = Le(e, t, r, l, c);\n                if (m == null) return m;\n                if (s) {\n                    var L = t.children;\n                    if (L !== void 0) if (n) if (Ie(L)) {\n                        for(var ge = 0; ge < L.length; ge++)Ce(L[ge], e);\n                        Object.freeze && Object.freeze(L);\n                    } else v(\"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\");\n                    else Ce(L, e);\n                }\n                return e === d ? We(m) : Xe(m), m;\n            }\n        }\n        function i(e, t, r) {\n            return Ue(e, t, r, !0);\n        }\n        function p(e, t, r) {\n            return Ue(e, t, r, !1);\n        }\n        var S = p, Ve = i;\n        ft.Fragment = d, ft.jsx = S, ft.jsxs = Ve;\n    }()), ft;\n}\n false ? 0 : St.exports = Qt();\nvar rt = St.exports, kt = {\n    exports: {}\n}, pt = {};\n/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var $t;\nfunction Jt() {\n    if ($t) return pt;\n    $t = 1;\n    var o = react__WEBPACK_IMPORTED_MODULE_0__, u = Symbol.for(\"react.element\"), k = Symbol.for(\"react.fragment\"), d = Object.prototype.hasOwnProperty, R = o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, _ = {\n        key: !0,\n        ref: !0,\n        __self: !0,\n        __source: !0\n    };\n    function Y(j, f, X) {\n        var g, F = {}, x = null, Q = null;\n        X !== void 0 && (x = \"\" + X), f.key !== void 0 && (x = \"\" + f.key), f.ref !== void 0 && (Q = f.ref);\n        for(g in f)d.call(f, g) && !_.hasOwnProperty(g) && (F[g] = f[g]);\n        if (j && j.defaultProps) for(g in f = j.defaultProps, f)F[g] === void 0 && (F[g] = f[g]);\n        return {\n            $$typeof: u,\n            type: j,\n            key: x,\n            ref: Q,\n            props: F,\n            _owner: R.current\n        };\n    }\n    return pt.Fragment = k, pt.jsx = Y, pt.jsxs = Y, pt;\n}\nvar mt = {};\n/**\n * @license React\n * react-jsx-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var Pt;\nfunction Zt() {\n    return Pt || (Pt = 1,  true && function() {\n        var o = react__WEBPACK_IMPORTED_MODULE_0__, u = Symbol.for(\"react.element\"), k = Symbol.for(\"react.portal\"), d = Symbol.for(\"react.fragment\"), R = Symbol.for(\"react.strict_mode\"), _ = Symbol.for(\"react.profiler\"), Y = Symbol.for(\"react.provider\"), j = Symbol.for(\"react.context\"), f = Symbol.for(\"react.forward_ref\"), X = Symbol.for(\"react.suspense\"), g = Symbol.for(\"react.suspense_list\"), F = Symbol.for(\"react.memo\"), x = Symbol.for(\"react.lazy\"), Q = Symbol.for(\"react.offscreen\"), Me = Symbol.iterator, he = \"@@iterator\";\n        function Se(e) {\n            if (e === null || typeof e != \"object\") return null;\n            var t = Me && e[Me] || e[he];\n            return typeof t == \"function\" ? t : null;\n        }\n        var U = o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        function v(e) {\n            {\n                for(var t = arguments.length, r = new Array(t > 1 ? t - 1 : 0), n = 1; n < t; n++)r[n - 1] = arguments[n];\n                Ne(\"error\", e, r);\n            }\n        }\n        function Ne(e, t, r) {\n            {\n                var n = U.ReactDebugCurrentFrame, l = n.getStackAddendum();\n                l !== \"\" && (t += \"%s\", r = r.concat([\n                    l\n                ]));\n                var c = r.map(function(s) {\n                    return String(s);\n                });\n                c.unshift(\"Warning: \" + t), Function.prototype.apply.call(console[e], console, c);\n            }\n        }\n        var Te = !1, je = !1, Ge = !1, be = !1, ze = !1, Ee;\n        Ee = Symbol.for(\"react.module.reference\");\n        function J(e) {\n            return !!(typeof e == \"string\" || typeof e == \"function\" || e === d || e === _ || ze || e === R || e === X || e === g || be || e === Q || Te || je || Ge || typeof e == \"object\" && e !== null && (e.$$typeof === x || e.$$typeof === F || e.$$typeof === Y || e.$$typeof === j || e.$$typeof === f || // This needs to include all possible module reference object\n            // types supported by any Flight configuration anywhere since\n            // we don't know which Flight build this will end up being used\n            // with.\n            e.$$typeof === Ee || e.getModuleId !== void 0));\n        }\n        function Z(e, t, r) {\n            var n = e.displayName;\n            if (n) return n;\n            var l = t.displayName || t.name || \"\";\n            return l !== \"\" ? r + \"(\" + l + \")\" : r;\n        }\n        function B(e) {\n            return e.displayName || \"Context\";\n        }\n        function M(e) {\n            if (e == null) return null;\n            if (typeof e.tag == \"number\" && v(\"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"), typeof e == \"function\") return e.displayName || e.name || null;\n            if (typeof e == \"string\") return e;\n            switch(e){\n                case d:\n                    return \"Fragment\";\n                case k:\n                    return \"Portal\";\n                case _:\n                    return \"Profiler\";\n                case R:\n                    return \"StrictMode\";\n                case X:\n                    return \"Suspense\";\n                case g:\n                    return \"SuspenseList\";\n            }\n            if (typeof e == \"object\") switch(e.$$typeof){\n                case j:\n                    var t = e;\n                    return B(t) + \".Consumer\";\n                case Y:\n                    var r = e;\n                    return B(r._context) + \".Provider\";\n                case f:\n                    return Z(e, e.render, \"ForwardRef\");\n                case F:\n                    var n = e.displayName || null;\n                    return n !== null ? n : M(e.type) || \"Memo\";\n                case x:\n                    {\n                        var l = e, c = l._payload, s = l._init;\n                        try {\n                            return M(s(c));\n                        } catch  {\n                            return null;\n                        }\n                    }\n            }\n            return null;\n        }\n        var N = Object.assign, P = 0, K, D, Fe, ae, ie, De, z;\n        function V() {}\n        V.__reactDisabledLog = !0;\n        function Oe() {\n            {\n                if (P === 0) {\n                    K = console.log, D = console.info, Fe = console.warn, ae = console.error, ie = console.group, De = console.groupCollapsed, z = console.groupEnd;\n                    var e = {\n                        configurable: !0,\n                        enumerable: !0,\n                        value: V,\n                        writable: !0\n                    };\n                    Object.defineProperties(console, {\n                        info: e,\n                        log: e,\n                        warn: e,\n                        error: e,\n                        group: e,\n                        groupCollapsed: e,\n                        groupEnd: e\n                    });\n                }\n                P++;\n            }\n        }\n        function A() {\n            {\n                if (P--, P === 0) {\n                    var e = {\n                        configurable: !0,\n                        enumerable: !0,\n                        writable: !0\n                    };\n                    Object.defineProperties(console, {\n                        log: N({}, e, {\n                            value: K\n                        }),\n                        info: N({}, e, {\n                            value: D\n                        }),\n                        warn: N({}, e, {\n                            value: Fe\n                        }),\n                        error: N({}, e, {\n                            value: ae\n                        }),\n                        group: N({}, e, {\n                            value: ie\n                        }),\n                        groupCollapsed: N({}, e, {\n                            value: De\n                        }),\n                        groupEnd: N({}, e, {\n                            value: z\n                        })\n                    });\n                }\n                P < 0 && v(\"disabledDepth fell below zero. This is a bug in React. Please file an issue.\");\n            }\n        }\n        var ye = U.ReactCurrentDispatcher, ne;\n        function ue(e, t, r) {\n            {\n                if (ne === void 0) try {\n                    throw Error();\n                } catch (l) {\n                    var n = l.stack.trim().match(/\\n( *(at )?)/);\n                    ne = n && n[1] || \"\";\n                }\n                return `\n` + ne + e;\n            }\n        }\n        var $ = !1, I;\n        {\n            var we = typeof WeakMap == \"function\" ? WeakMap : Map;\n            I = new we();\n        }\n        function Ae(e, t) {\n            if (!e || $) return \"\";\n            {\n                var r = I.get(e);\n                if (r !== void 0) return r;\n            }\n            var n;\n            $ = !0;\n            var l = Error.prepareStackTrace;\n            Error.prepareStackTrace = void 0;\n            var c;\n            c = ye.current, ye.current = null, Oe();\n            try {\n                if (t) {\n                    var s = function() {\n                        throw Error();\n                    };\n                    if (Object.defineProperty(s.prototype, \"props\", {\n                        set: function() {\n                            throw Error();\n                        }\n                    }), typeof Reflect == \"object\" && Reflect.construct) {\n                        try {\n                            Reflect.construct(s, []);\n                        } catch (q) {\n                            n = q;\n                        }\n                        Reflect.construct(e, [], s);\n                    } else {\n                        try {\n                            s.call();\n                        } catch (q) {\n                            n = q;\n                        }\n                        e.call(s.prototype);\n                    }\n                } else {\n                    try {\n                        throw Error();\n                    } catch (q) {\n                        n = q;\n                    }\n                    e();\n                }\n            } catch (q) {\n                if (q && n && typeof q.stack == \"string\") {\n                    for(var a = q.stack.split(`\n`), O = n.stack.split(`\n`), y = a.length - 1, m = O.length - 1; y >= 1 && m >= 0 && a[y] !== O[m];)m--;\n                    for(; y >= 1 && m >= 0; y--, m--)if (a[y] !== O[m]) {\n                        if (y !== 1 || m !== 1) do if (y--, m--, m < 0 || a[y] !== O[m]) {\n                            var L = `\n` + a[y].replace(\" at new \", \" at \");\n                            return e.displayName && L.includes(\"<anonymous>\") && (L = L.replace(\"<anonymous>\", e.displayName)), typeof e == \"function\" && I.set(e, L), L;\n                        }\n                        while (y >= 1 && m >= 0);\n                        break;\n                    }\n                }\n            } finally{\n                $ = !1, ye.current = c, A(), Error.prepareStackTrace = l;\n            }\n            var ge = e ? e.displayName || e.name : \"\", tt = ge ? ue(ge) : \"\";\n            return typeof e == \"function\" && I.set(e, tt), tt;\n        }\n        function W(e, t, r) {\n            return Ae(e, !1);\n        }\n        function E(e) {\n            var t = e.prototype;\n            return !!(t && t.isReactComponent);\n        }\n        function b(e, t, r) {\n            if (e == null) return \"\";\n            if (typeof e == \"function\") return Ae(e, E(e));\n            if (typeof e == \"string\") return ue(e);\n            switch(e){\n                case X:\n                    return ue(\"Suspense\");\n                case g:\n                    return ue(\"SuspenseList\");\n            }\n            if (typeof e == \"object\") switch(e.$$typeof){\n                case f:\n                    return W(e.render);\n                case F:\n                    return b(e.type, t, r);\n                case x:\n                    {\n                        var n = e, l = n._payload, c = n._init;\n                        try {\n                            return b(c(l), t, r);\n                        } catch  {}\n                    }\n            }\n            return \"\";\n        }\n        var w = Object.prototype.hasOwnProperty, oe = {}, h = U.ReactDebugCurrentFrame;\n        function T(e) {\n            if (e) {\n                var t = e._owner, r = b(e.type, e._source, t ? t.type : null);\n                h.setExtraStackFrame(r);\n            } else h.setExtraStackFrame(null);\n        }\n        function ke(e, t, r, n, l) {\n            {\n                var c = Function.call.bind(w);\n                for(var s in e)if (c(e, s)) {\n                    var a = void 0;\n                    try {\n                        if (typeof e[s] != \"function\") {\n                            var O = Error((n || \"React class\") + \": \" + r + \" type `\" + s + \"` is invalid; it must be a function, usually from the `prop-types` package, but received `\" + typeof e[s] + \"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                            throw O.name = \"Invariant Violation\", O;\n                        }\n                        a = e[s](t, s, n, r, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n                    } catch (y) {\n                        a = y;\n                    }\n                    a && !(a instanceof Error) && (T(l), v(\"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).\", n || \"React class\", r, s, typeof a), T(null)), a instanceof Error && !(a.message in oe) && (oe[a.message] = !0, T(l), v(\"Failed %s type: %s\", r, a.message), T(null));\n                }\n            }\n        }\n        var Re = Array.isArray;\n        function Ie(e) {\n            return Re(e);\n        }\n        function Qe(e) {\n            {\n                var t = typeof Symbol == \"function\" && Symbol.toStringTag, r = t && e[Symbol.toStringTag] || e.constructor.name || \"Object\";\n                return r;\n            }\n        }\n        function Je(e) {\n            try {\n                return G(e), !1;\n            } catch  {\n                return !0;\n            }\n        }\n        function G(e) {\n            return \"\" + e;\n        }\n        function xe(e) {\n            if (Je(e)) return v(\"The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.\", Qe(e)), G(e);\n        }\n        var H = U.ReactCurrentOwner, _e = {\n            key: !0,\n            ref: !0,\n            __self: !0,\n            __source: !0\n        }, se, ee, te;\n        te = {};\n        function Ze(e) {\n            if (w.call(e, \"ref\")) {\n                var t = Object.getOwnPropertyDescriptor(e, \"ref\").get;\n                if (t && t.isReactWarning) return !1;\n            }\n            return e.ref !== void 0;\n        }\n        function et(e) {\n            if (w.call(e, \"key\")) {\n                var t = Object.getOwnPropertyDescriptor(e, \"key\").get;\n                if (t && t.isReactWarning) return !1;\n            }\n            return e.key !== void 0;\n        }\n        function qe(e, t) {\n            if (typeof e.ref == \"string\" && H.current && t && H.current.stateNode !== t) {\n                var r = M(H.current.type);\n                te[r] || (v('Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', M(H.current.type), e.ref), te[r] = !0);\n            }\n        }\n        function Ke(e, t) {\n            {\n                var r = function() {\n                    se || (se = !0, v(\"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", t));\n                };\n                r.isReactWarning = !0, Object.defineProperty(e, \"key\", {\n                    get: r,\n                    configurable: !0\n                });\n            }\n        }\n        function le(e, t) {\n            {\n                var r = function() {\n                    ee || (ee = !0, v(\"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", t));\n                };\n                r.isReactWarning = !0, Object.defineProperty(e, \"ref\", {\n                    get: r,\n                    configurable: !0\n                });\n            }\n        }\n        var fe = function(e, t, r, n, l, c, s) {\n            var a = {\n                // This tag allows us to uniquely identify this as a React Element\n                $$typeof: u,\n                // Built-in properties that belong on the element\n                type: e,\n                key: t,\n                ref: r,\n                props: s,\n                // Record the component responsible for creating this element.\n                _owner: c\n            };\n            return a._store = {}, Object.defineProperty(a._store, \"validated\", {\n                configurable: !1,\n                enumerable: !1,\n                writable: !0,\n                value: !1\n            }), Object.defineProperty(a, \"_self\", {\n                configurable: !1,\n                enumerable: !1,\n                writable: !1,\n                value: n\n            }), Object.defineProperty(a, \"_source\", {\n                configurable: !1,\n                enumerable: !1,\n                writable: !1,\n                value: l\n            }), Object.freeze && (Object.freeze(a.props), Object.freeze(a)), a;\n        };\n        function Le(e, t, r, n, l) {\n            {\n                var c, s = {}, a = null, O = null;\n                r !== void 0 && (xe(r), a = \"\" + r), et(t) && (xe(t.key), a = \"\" + t.key), Ze(t) && (O = t.ref, qe(t, l));\n                for(c in t)w.call(t, c) && !_e.hasOwnProperty(c) && (s[c] = t[c]);\n                if (e && e.defaultProps) {\n                    var y = e.defaultProps;\n                    for(c in y)s[c] === void 0 && (s[c] = y[c]);\n                }\n                if (a || O) {\n                    var m = typeof e == \"function\" ? e.displayName || e.name || \"Unknown\" : e;\n                    a && Ke(s, m), O && le(s, m);\n                }\n                return fe(e, a, O, l, n, H.current, s);\n            }\n        }\n        var pe = U.ReactCurrentOwner, me = U.ReactDebugCurrentFrame;\n        function re(e) {\n            if (e) {\n                var t = e._owner, r = b(e.type, e._source, t ? t.type : null);\n                me.setExtraStackFrame(r);\n            } else me.setExtraStackFrame(null);\n        }\n        var de;\n        de = !1;\n        function ce(e) {\n            return typeof e == \"object\" && e !== null && e.$$typeof === u;\n        }\n        function ve() {\n            {\n                if (pe.current) {\n                    var e = M(pe.current.type);\n                    if (e) return `\n\nCheck the render method of \\`` + e + \"`.\";\n                }\n                return \"\";\n            }\n        }\n        function Be(e) {\n            {\n                if (e !== void 0) {\n                    var t = e.fileName.replace(/^.*[\\\\\\/]/, \"\"), r = e.lineNumber;\n                    return `\n\nCheck your code at ` + t + \":\" + r + \".\";\n                }\n                return \"\";\n            }\n        }\n        var $e = {};\n        function Ye(e) {\n            {\n                var t = ve();\n                if (!t) {\n                    var r = typeof e == \"string\" ? e : e.displayName || e.name;\n                    r && (t = `\n\nCheck the top-level render call using <` + r + \">.\");\n                }\n                return t;\n            }\n        }\n        function Pe(e, t) {\n            {\n                if (!e._store || e._store.validated || e.key != null) return;\n                e._store.validated = !0;\n                var r = Ye(t);\n                if ($e[r]) return;\n                $e[r] = !0;\n                var n = \"\";\n                e && e._owner && e._owner !== pe.current && (n = \" It was passed a child from \" + M(e._owner.type) + \".\"), re(e), v('Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', r, n), re(null);\n            }\n        }\n        function Ce(e, t) {\n            {\n                if (typeof e != \"object\") return;\n                if (Ie(e)) for(var r = 0; r < e.length; r++){\n                    var n = e[r];\n                    ce(n) && Pe(n, t);\n                }\n                else if (ce(e)) e._store && (e._store.validated = !0);\n                else if (e) {\n                    var l = Se(e);\n                    if (typeof l == \"function\" && l !== e.entries) for(var c = l.call(e), s; !(s = c.next()).done;)ce(s.value) && Pe(s.value, t);\n                }\n            }\n        }\n        function Xe(e) {\n            {\n                var t = e.type;\n                if (t == null || typeof t == \"string\") return;\n                var r;\n                if (typeof t == \"function\") r = t.propTypes;\n                else if (typeof t == \"object\" && (t.$$typeof === f || // Note: Memo only checks outer props here.\n                // Inner props are checked in the reconciler.\n                t.$$typeof === F)) r = t.propTypes;\n                else return;\n                if (r) {\n                    var n = M(t);\n                    ke(r, e.props, \"prop\", n, e);\n                } else if (t.PropTypes !== void 0 && !de) {\n                    de = !0;\n                    var l = M(t);\n                    v(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", l || \"Unknown\");\n                }\n                typeof t.getDefaultProps == \"function\" && !t.getDefaultProps.isReactClassApproved && v(\"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.\");\n            }\n        }\n        function We(e) {\n            {\n                for(var t = Object.keys(e.props), r = 0; r < t.length; r++){\n                    var n = t[r];\n                    if (n !== \"children\" && n !== \"key\") {\n                        re(e), v(\"Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.\", n), re(null);\n                        break;\n                    }\n                }\n                e.ref !== null && (re(e), v(\"Invalid attribute `ref` supplied to `React.Fragment`.\"), re(null));\n            }\n        }\n        function Ue(e, t, r, n, l, c) {\n            {\n                var s = J(e);\n                if (!s) {\n                    var a = \"\";\n                    (e === void 0 || typeof e == \"object\" && e !== null && Object.keys(e).length === 0) && (a += \" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\");\n                    var O = Be(l);\n                    O ? a += O : a += ve();\n                    var y;\n                    e === null ? y = \"null\" : Ie(e) ? y = \"array\" : e !== void 0 && e.$$typeof === u ? (y = \"<\" + (M(e.type) || \"Unknown\") + \" />\", a = \" Did you accidentally export a JSX literal instead of a component?\") : y = typeof e, v(\"React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s\", y, a);\n                }\n                var m = Le(e, t, r, l, c);\n                if (m == null) return m;\n                if (s) {\n                    var L = t.children;\n                    if (L !== void 0) if (n) if (Ie(L)) {\n                        for(var ge = 0; ge < L.length; ge++)Ce(L[ge], e);\n                        Object.freeze && Object.freeze(L);\n                    } else v(\"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\");\n                    else Ce(L, e);\n                }\n                return e === d ? We(m) : Xe(m), m;\n            }\n        }\n        function i(e, t, r) {\n            return Ue(e, t, r, !0);\n        }\n        function p(e, t, r) {\n            return Ue(e, t, r, !1);\n        }\n        var S = p, Ve = i;\n        mt.Fragment = d, mt.jsx = S, mt.jsxs = Ve;\n    }()), mt;\n}\n false ? 0 : kt.exports = Zt();\nvar at = kt.exports;\nconst nt = (o, u, k)=>o < u ? u : o > k ? k : o, er = (o, u, k)=>{\n    let d = 0;\n    return u === \"top\" ? d = (o.offsetY * 2 - 1) * -1 : u === \"bottom\" ? d = (o.offsetY - 0.5) * 2 : u === \"left\" ? d = (o.offsetX * 2 - 1) * -1 : u === \"right\" ? d = (o.offsetX - 0.5) * 2 : u === \"all\" && (d = Math.max(Math.abs(o.offsetX - 0.5) * 2, Math.abs(o.offsetY - 0.5) * 2)), (d * k).toFixed(2);\n}, tr = (o, u, k)=>{\n    let d = o.offsetX, R = o.offsetY;\n    k || (d = 1 - d, R = 1 - R);\n    let _ = \"translateX(0%) translateY(0%)\";\n    return u === \"top\" ? _ = `translateX( ${d * 50}% )` : u === \"bottom\" ? _ = `translateX( ${d * 50}% ) translateY(50%)` : u === \"left\" ? _ = `translateY( ${R * 50}% )` : u === \"right\" ? _ = `translateX(50%) translateY( ${R * 50}% ) ` : u === \"all\" && (_ = `translateX(${(d - 0.5) * 50}%) translateY(${(R - 0.5) * 50}%) `), _;\n}, Ct = (o)=>{\n    if (!o) return \"translateX(0%) translateY(0%)\";\n    switch(o){\n        case \"top-left\":\n            o = {\n                left: \"25%\",\n                top: \"25%\"\n            };\n            break;\n        case \"top-right\":\n            o = {\n                left: \"75%\",\n                top: \"25%\"\n            };\n            break;\n        case \"bottom-left\":\n            o = {\n                left: \"25%\",\n                top: \"75%\"\n            };\n            break;\n        case \"bottom-right\":\n            o = {\n                left: \"75%\",\n                top: \"75%\"\n            };\n            break;\n        case \"center\":\n            o = {\n                left: \"50%\",\n                top: \"50%\"\n            };\n            break;\n    }\n    const u = o.left.includes(\"%\") ? String(parseInt(o.left) / 2) + \"%\" : o.left, k = o.top.includes(\"%\") ? String(parseInt(o.top) / 2) + \"%\" : o.top;\n    return `translateX(${u}) translateY(${k})`;\n}, rr = (o, u, k)=>{\n    let d = o.offsetX, R = o.offsetY;\n    u === \"top-right\" && (d = 1 - d), u === \"bottom-left\" && (R = 1 - R), u === \"bottom-right\" && (d = 1 - d, R = 1 - R);\n    let _ = 0;\n    return k ? _ = ((d + R) * (3 / 2) - 1) * 100 : _ = ((d + R) * (-3 / 2) + 0.5) * 100, `translateX(${_}%)`;\n}, Mt = (o, u)=>{\n    if (!u) return `translateX(${o ? \"50%\" : \"-100%\"})`;\n    switch(u){\n        case \"left\":\n            u = {\n                left: \"25%\"\n            };\n            break;\n        case \"center\":\n            u = {\n                left: \"50%\"\n            };\n            break;\n        case \"right\":\n            u = {\n                left: \"75%\"\n            };\n            break;\n    }\n    return `translateX(${u.left.includes(\"%\") ? String(parseInt(u.left) / 2) + \"%\" : u.left})`;\n}, Ft = (o)=>{\n    if (o instanceof HTMLElement) return o;\n    if (o instanceof Document) return document.documentElement;\n    if (o.current && o.current instanceof Object && \"element\" in o.current && o.current.element instanceof HTMLElement) return o.current.element;\n    if (o.current && o.current instanceof HTMLElement) return o.current;\n}, nr = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ width: o, height: u, borderRadius: k, perspective: d = \"1000px\", scale: R = 1, shadowEnable: _ = !1, shadow: Y = \"0 0 1rem rgba(0,0,0,0.5)\", shadowType: j = \"box\", lineGlareEnable: f = !0, lineGlareBlurEnable: X = !0, lineGlareBlurAmount: g = \"4px\", lineGlareMaxOpacity: F = 0.1, lineGlareWidthPercent: x = 10, lineGlareMixBlendMode: Q = \"normal\", lineGlareColor: Me = \"white\", lineGlareReverse: he = !1, lineGlareDirection: Se = \"to-bottom-right\", lineGlareHoverPosition: U = \"top-left\", lineGlareFixedPosition: v = void 0, spotGlareEnable: Ne = !0, spotGlareSizePercent: Te = 200, spotGlareMaxOpacity: je = 0.5, spotGlareMixBlendMode: Ge = \"normal\", spotGlarePosition: be = \"top\", spotGlareColor: ze = \"white\", spotGlareReverse: Ee = !1, spotGlareFixedPosition: J = void 0, tiltMaxAngleX: Z = 20, tiltMaxAngleY: B = 20, tiltReverse: M = !1, tiltReset: N = !0, initialAngleX: P = 0, initialAngleY: K = 0, disableScrollOnTouch: D = !0, style: Fe, tiltStyle: ae, tiltClass: ie, tiltProps: De, gyroMaxAngleX: z = 0, gyroMaxAngleY: V = 0, gyroReverse: Oe = !1, disabled: A = !1, disabledFilter: ye = \"grayscale(1) brightness(125%)\", CSSTransition: ne = \"all 0.4s cubic-bezier(0.03, 0.98, 0.52, 0.99)\", TiltWrapper: ue, fullPageListening: $ = !1, controlElement: I, controlElementOnly: we = !1, preserve3dEnable: Ae = !0, testIdEnable: W = !1, onTilt: E, onReset: b, onMouseEnter: w, onMouseMove: oe, onMouseLeave: h, onTouchStart: T, onTouchMove: ke, onTouchEnd: Re, children: Ie, ...Qe }, Je)=>{\n    const G = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), xe = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(!1), H = !$ && (!I || I && !we), _e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), se = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), ee = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), te = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), Ze = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({ children: i })=>/* @__PURE__ */ at.jsx(at.Fragment, {\n            children: i\n        }), []), et = ue || Ze;\n    f && (x = nt(x, 0, 50) / 2), Ne && (Te = Te < 0 ? 0 : Te / 2), Z = nt(Z, 0, 90), B = nt(B, 0, 90), z = nt(z, 0, 90), V = nt(V, 0, 90), P && (P = nt(P, -Z, Z)), K && (K = nt(K, -B, B));\n    const qe = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>f ? (100 - x) / 2 : 0, [\n        f,\n        x\n    ]), Ke = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>f ? qe + x : 0, [\n        f,\n        x,\n        qe\n    ]), le = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((i = !0)=>{\n        requestAnimationFrame(()=>{\n            se.current && (se.current.style.willChange = i ? \"transform\" : \"\"), ee.current && (ee.current.style.willChange = i ? \"transform, opacity\" : \"\"), te.current && (te.current.style.willChange = i ? \"transform\" : \"\");\n        });\n    }, []), fe = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((i = !0)=>{\n        requestAnimationFrame(()=>{\n            if (j === \"box\") se.current && _ && (se.current.style.boxShadow = i ? Y : \"\");\n            else if (_e.current && _) {\n                const p = _e.current.style.filter.replace(/(drop-shadow?\\(.*?\\))(?=\\s[a-z].*?\\(.*?\\)|\\s*$)/g, \"\");\n                _e.current.style.filter = i ? p + ` drop-shadow(${Y})` : p;\n            }\n        });\n    }, [\n        Y,\n        _,\n        j\n    ]), Le = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (!_e.current || !ee.current || !G.current || J) return;\n        const i = er(G.current, be, je), p = tr(G.current, be, Ee);\n        requestAnimationFrame(()=>{\n            ee.current && (ee.current.style.opacity = i, ee.current.style.transform = p);\n        });\n    }, [\n        be,\n        je,\n        Ee,\n        J\n    ]), pe = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (!_e.current || !te.current || !G.current || v) return;\n        const i = rr(G.current, U, he);\n        requestAnimationFrame(()=>{\n            te.current && (te.current.style.transform = i);\n        });\n    }, [\n        U,\n        he,\n        v\n    ]), me = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((i = !0)=>{\n        if (!_e.current || !G.current) return {\n            angleX: 0,\n            angleY: 0\n        };\n        let p = -(G.current.offsetY - 0.5) * 2 * Z, S = (G.current.offsetX - 0.5) * 2 * B;\n        return M && i && (p = -p, S = -S), {\n            angleX: p,\n            angleY: S\n        };\n    }, [\n        Z,\n        B,\n        M\n    ]), re = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((i)=>{\n        const p = (i.angleY / B + 1) / 2, S = (-i.angleX / Z + 1) / 2;\n        G.current = {\n            offsetX: p,\n            offsetY: S\n        };\n    }, [\n        Z,\n        B\n    ]), de = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((i, p = !0, S = !1)=>{\n        const Ve = p ? R : 1;\n        requestAnimationFrame(()=>{\n            se.current && (se.current.style.transform = `rotateX(${i.angleX}deg) rotateY(${i.angleY}deg) scale3d(${Ve},${Ve},${Ve})`);\n        }), E && E({\n            angleX: i.angleX,\n            angleY: i.angleY\n        }, S);\n    }, [\n        E,\n        R\n    ]), ce = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((i, p = !1, S = !1)=>{\n        re(i), de(i, p, S), fe(p), pe(), Le();\n    }, [\n        re,\n        de,\n        fe,\n        pe,\n        Le\n    ]), ve = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        b && b(), P || K ? ce({\n            angleX: P || 0,\n            angleY: K || 0\n        }) : (G.current = void 0, requestAnimationFrame(()=>{\n            te.current && !v && (te.current.style.transform = Mt(he)), ee.current && !J && (ee.current.style.transform = Ct(), ee.current.style.opacity = \"0\"), se.current && (se.current.style.transform = \"rotateX(0deg) rotateY(0deg) scale3d(1, 1, 1)\");\n        }));\n    }, [\n        P,\n        K,\n        he,\n        J,\n        v,\n        b,\n        ce\n    ]), Be = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((i, p)=>{\n        if (!p) return;\n        if ($) {\n            G.current = {\n                offsetX: i.x / window.innerWidth,\n                offsetY: i.y / window.innerHeight\n            };\n            return;\n        }\n        const S = p.getBoundingClientRect();\n        if (!S.width || !S.height) return;\n        const Ve = nt(i.x, S.left, S.right), e = nt(i.y, S.top, S.bottom), t = (Ve - S.left) / S.width, r = (e - S.top) / S.height;\n        G.current = {\n            offsetX: t,\n            offsetY: r\n        };\n    }, [\n        $\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(Je, ()=>({\n            tilt: ce,\n            reset: ve,\n            angle: ()=>me(!1),\n            updateWillChange: le,\n            element: _e.current\n        }), [\n        ce,\n        ve,\n        le,\n        me\n    ]);\n    const $e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        A || (xe.current = !0, le(), fe());\n    }, [\n        A,\n        fe,\n        le\n    ]), Ye = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        A || (D && !$ && (typeof D == \"boolean\" ? document.body.style.overflow = \"hidden\" : D.style.overflow = \"hidden\"), xe.current = !0, le(), fe());\n    }, [\n        D,\n        A,\n        $,\n        fe,\n        le\n    ]), Pe = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((i)=>{\n        A || (Be({\n            x: i.clientX,\n            y: i.clientY\n        }, i.currentTarget), de(me()), pe(), Le());\n    }, [\n        A,\n        me,\n        Be,\n        de,\n        pe,\n        Le\n    ]), Ce = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((i)=>{\n        if (A) return;\n        const p = i.changedTouches[0];\n        p && (Be({\n            x: p.clientX,\n            y: p.clientY\n        }, i.currentTarget), de(me()), pe(), Le());\n    }, [\n        A,\n        me,\n        Be,\n        de,\n        pe,\n        Le\n    ]), Xe = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        A || (xe.current = !1, le(!1), fe(!1), N && ve());\n    }, [\n        A,\n        ve,\n        N,\n        fe,\n        le\n    ]), We = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        A || (D && !$ && (typeof D == \"boolean\" ? document.body.style.overflow = \"\" : D.style.overflow = \"\"), xe.current = !1, le(!1), fe(!1), N && ve());\n    }, [\n        D,\n        A,\n        $,\n        ve,\n        N,\n        fe,\n        le\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!I && !$) return;\n        let i;\n        $ || !I ? i = [\n            document\n        ] : i = Array.isArray(I) ? I : [\n            I\n        ];\n        for (let p of i){\n            const S = Ft(p);\n            S && (p = S, p.addEventListener(\"mouseenter\", $e), p.addEventListener(\"mousemove\", Pe), p.addEventListener(\"mouseleave\", Xe), p.addEventListener(\"touchstart\", Ye, {\n                passive: !0\n            }), p.addEventListener(\"touchmove\", Ce, {\n                passive: !0\n            }), p.addEventListener(\"touchend\", We, {\n                passive: !0\n            }));\n        }\n        return ()=>{\n            for (let p of i){\n                const S = Ft(p);\n                S && (p = S, p.removeEventListener(\"mouseenter\", $e), p.removeEventListener(\"mousemove\", Pe), p.removeEventListener(\"mouseleave\", Xe), p.removeEventListener(\"touchstart\", Ye), p.removeEventListener(\"touchmove\", Ce), p.removeEventListener(\"touchend\", We));\n            }\n        };\n    }, [\n        I,\n        $e,\n        Pe,\n        Xe,\n        Ye,\n        Ce,\n        We,\n        $\n    ]);\n    const Ue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((i)=>{\n        if (xe.current || i.beta === null && i.gamma === null) return;\n        let p = z && i.beta ? nt(-i.beta, -z, z) : P || 0, S = V && i.gamma ? nt(i.gamma, -V, V) : K || 0;\n        Oe && (p = -p, S = -S), ce({\n            angleX: p,\n            angleY: S\n        }, !1, !0);\n    }, [\n        z,\n        V,\n        P,\n        K,\n        Oe,\n        ce\n    ]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!(!z && !V)) return window.addEventListener(\"deviceorientation\", Ue), ()=>window.removeEventListener(\"deviceorientation\", Ue);\n    }, [\n        z,\n        V,\n        Ue,\n        le\n    ]), /* @__PURE__ */ at.jsx(\"div\", {\n        ref: (i)=>{\n            i && (_e.current = i, G.current && (A ? ve() : ce(me())), (P || K) && !G.current && ve());\n        },\n        \"data-testid\": W ? \"container\" : void 0,\n        style: Object.assign({\n            display: \"inline-block\",\n            verticalAlign: \"middle\",\n            width: o,\n            height: u,\n            borderRadius: k,\n            perspective: d,\n            transformStyle: Ae ? \"preserve-3d\" : void 0,\n            backfaceVisibility: \"hidden\",\n            filter: A ? ye : void 0,\n            transition: j === \"drop\" ? ne : void 0\n        }, Fe),\n        onMouseEnter: H ? w ? (i)=>{\n            $e(), w(i);\n        } : $e : w,\n        onTouchStart: H ? T ? (i)=>{\n            Ye(), T(i);\n        } : Ye : T,\n        onMouseMove: H ? oe ? (i)=>{\n            Pe(i), oe(i);\n        } : Pe : oe,\n        onTouchMove: H ? ke ? (i)=>{\n            Ce(i), ke(i);\n        } : Ce : ke,\n        onMouseLeave: H ? h ? (i)=>{\n            Xe(), h(i);\n        } : Xe : h,\n        onTouchEnd: H ? Re ? (i)=>{\n            We(), Re(i);\n        } : We : Re,\n        ...Qe,\n        children: /* @__PURE__ */ at.jsx(et, {\n            children: /* @__PURE__ */ at.jsxs(\"div\", {\n                ref: se,\n                \"data-testid\": W ? \"tilt\" : void 0,\n                style: Object.assign({\n                    boxSizing: \"border-box\",\n                    position: \"relative\",\n                    width: \"100%\",\n                    height: \"100%\",\n                    borderRadius: k,\n                    transformStyle: Ae ? \"preserve-3d\" : void 0,\n                    backfaceVisibility: \"hidden\",\n                    transition: ne,\n                    transform: \"rotateX(0deg) rotateY(0deg) scale3d(1, 1, 1)\"\n                }, ae),\n                className: ie,\n                ...De,\n                children: [\n                    Ie,\n                    Ne && /* @__PURE__ */ at.jsx(\"div\", {\n                        \"data-testid\": W ? \"spot-glare-container\" : void 0,\n                        style: {\n                            pointerEvents: \"none\",\n                            position: \"absolute\",\n                            inset: \"0\",\n                            borderRadius: k,\n                            overflow: \"hidden\",\n                            backfaceVisibility: \"hidden\",\n                            mixBlendMode: Ge\n                        },\n                        children: /* @__PURE__ */ at.jsx(\"div\", {\n                            ref: ee,\n                            \"data-testid\": W ? \"spot-glare\" : void 0,\n                            style: {\n                                position: \"absolute\",\n                                left: be === \"all\" && !J ? \"-50%\" : \"-100%\",\n                                top: be === \"all\" && !J ? \"-50%\" : \"-100%\",\n                                width: \"200%\",\n                                height: \"200%\",\n                                transition: ne,\n                                backgroundImage: `radial-gradient(${ze}, transparent ${Te}%)`,\n                                transform: Ct(J),\n                                opacity: J ? je : \"0\"\n                            }\n                        })\n                    }),\n                    f && /* @__PURE__ */ at.jsx(\"div\", {\n                        \"data-testid\": W ? \"line-glare-container\" : void 0,\n                        style: {\n                            pointerEvents: \"none\",\n                            position: \"absolute\",\n                            inset: \"0\",\n                            borderRadius: k,\n                            overflow: \"hidden\",\n                            backfaceVisibility: \"hidden\",\n                            mixBlendMode: Q\n                        },\n                        children: /* @__PURE__ */ at.jsx(\"div\", {\n                            \"data-testid\": W ? \"line-glare\" : void 0,\n                            ref: te,\n                            style: {\n                                position: \"absolute\",\n                                left: v ? \"-100%\" : 0,\n                                top: \"-50%\",\n                                width: \"200%\",\n                                height: \"200%\",\n                                filter: X ? `blur(${g})` : \"\",\n                                transition: ne,\n                                opacity: String(F),\n                                transform: Mt(he, v),\n                                backgroundImage: `linear-gradient(${Se === \"to-bottom-right\" ? \"to bottom right\" : \"to bottom left\"}, transparent, transparent ${qe}%, ${Me} calc(${qe}% + 1px), ${Me} ${Ke}%, transparent calc(${Ke}% + 1px), transparent 0%)`\n                            }\n                        })\n                    })\n                ]\n            })\n        })\n    });\n}), Vt = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(nr);\nVt.displayName = \"Tilt\";\nvar Rt = {\n    exports: {}\n}, dt = {};\n/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var At;\nfunction or() {\n    if (At) return dt;\n    At = 1;\n    var o = react__WEBPACK_IMPORTED_MODULE_0__, u = Symbol.for(\"react.element\"), k = Symbol.for(\"react.fragment\"), d = Object.prototype.hasOwnProperty, R = o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, _ = {\n        key: !0,\n        ref: !0,\n        __self: !0,\n        __source: !0\n    };\n    function Y(j, f, X) {\n        var g, F = {}, x = null, Q = null;\n        X !== void 0 && (x = \"\" + X), f.key !== void 0 && (x = \"\" + f.key), f.ref !== void 0 && (Q = f.ref);\n        for(g in f)d.call(f, g) && !_.hasOwnProperty(g) && (F[g] = f[g]);\n        if (j && j.defaultProps) for(g in f = j.defaultProps, f)F[g] === void 0 && (F[g] = f[g]);\n        return {\n            $$typeof: u,\n            type: j,\n            key: x,\n            ref: Q,\n            props: F,\n            _owner: R.current\n        };\n    }\n    return dt.Fragment = k, dt.jsx = Y, dt.jsxs = Y, dt;\n}\nvar gt = {};\n/**\n * @license React\n * react-jsx-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var It;\nfunction ar() {\n    return It || (It = 1,  true && function() {\n        var o = react__WEBPACK_IMPORTED_MODULE_0__, u = Symbol.for(\"react.element\"), k = Symbol.for(\"react.portal\"), d = Symbol.for(\"react.fragment\"), R = Symbol.for(\"react.strict_mode\"), _ = Symbol.for(\"react.profiler\"), Y = Symbol.for(\"react.provider\"), j = Symbol.for(\"react.context\"), f = Symbol.for(\"react.forward_ref\"), X = Symbol.for(\"react.suspense\"), g = Symbol.for(\"react.suspense_list\"), F = Symbol.for(\"react.memo\"), x = Symbol.for(\"react.lazy\"), Q = Symbol.for(\"react.offscreen\"), Me = Symbol.iterator, he = \"@@iterator\";\n        function Se(e) {\n            if (e === null || typeof e != \"object\") return null;\n            var t = Me && e[Me] || e[he];\n            return typeof t == \"function\" ? t : null;\n        }\n        var U = o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        function v(e) {\n            {\n                for(var t = arguments.length, r = new Array(t > 1 ? t - 1 : 0), n = 1; n < t; n++)r[n - 1] = arguments[n];\n                Ne(\"error\", e, r);\n            }\n        }\n        function Ne(e, t, r) {\n            {\n                var n = U.ReactDebugCurrentFrame, l = n.getStackAddendum();\n                l !== \"\" && (t += \"%s\", r = r.concat([\n                    l\n                ]));\n                var c = r.map(function(s) {\n                    return String(s);\n                });\n                c.unshift(\"Warning: \" + t), Function.prototype.apply.call(console[e], console, c);\n            }\n        }\n        var Te = !1, je = !1, Ge = !1, be = !1, ze = !1, Ee;\n        Ee = Symbol.for(\"react.module.reference\");\n        function J(e) {\n            return !!(typeof e == \"string\" || typeof e == \"function\" || e === d || e === _ || ze || e === R || e === X || e === g || be || e === Q || Te || je || Ge || typeof e == \"object\" && e !== null && (e.$$typeof === x || e.$$typeof === F || e.$$typeof === Y || e.$$typeof === j || e.$$typeof === f || // This needs to include all possible module reference object\n            // types supported by any Flight configuration anywhere since\n            // we don't know which Flight build this will end up being used\n            // with.\n            e.$$typeof === Ee || e.getModuleId !== void 0));\n        }\n        function Z(e, t, r) {\n            var n = e.displayName;\n            if (n) return n;\n            var l = t.displayName || t.name || \"\";\n            return l !== \"\" ? r + \"(\" + l + \")\" : r;\n        }\n        function B(e) {\n            return e.displayName || \"Context\";\n        }\n        function M(e) {\n            if (e == null) return null;\n            if (typeof e.tag == \"number\" && v(\"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"), typeof e == \"function\") return e.displayName || e.name || null;\n            if (typeof e == \"string\") return e;\n            switch(e){\n                case d:\n                    return \"Fragment\";\n                case k:\n                    return \"Portal\";\n                case _:\n                    return \"Profiler\";\n                case R:\n                    return \"StrictMode\";\n                case X:\n                    return \"Suspense\";\n                case g:\n                    return \"SuspenseList\";\n            }\n            if (typeof e == \"object\") switch(e.$$typeof){\n                case j:\n                    var t = e;\n                    return B(t) + \".Consumer\";\n                case Y:\n                    var r = e;\n                    return B(r._context) + \".Provider\";\n                case f:\n                    return Z(e, e.render, \"ForwardRef\");\n                case F:\n                    var n = e.displayName || null;\n                    return n !== null ? n : M(e.type) || \"Memo\";\n                case x:\n                    {\n                        var l = e, c = l._payload, s = l._init;\n                        try {\n                            return M(s(c));\n                        } catch  {\n                            return null;\n                        }\n                    }\n            }\n            return null;\n        }\n        var N = Object.assign, P = 0, K, D, Fe, ae, ie, De, z;\n        function V() {}\n        V.__reactDisabledLog = !0;\n        function Oe() {\n            {\n                if (P === 0) {\n                    K = console.log, D = console.info, Fe = console.warn, ae = console.error, ie = console.group, De = console.groupCollapsed, z = console.groupEnd;\n                    var e = {\n                        configurable: !0,\n                        enumerable: !0,\n                        value: V,\n                        writable: !0\n                    };\n                    Object.defineProperties(console, {\n                        info: e,\n                        log: e,\n                        warn: e,\n                        error: e,\n                        group: e,\n                        groupCollapsed: e,\n                        groupEnd: e\n                    });\n                }\n                P++;\n            }\n        }\n        function A() {\n            {\n                if (P--, P === 0) {\n                    var e = {\n                        configurable: !0,\n                        enumerable: !0,\n                        writable: !0\n                    };\n                    Object.defineProperties(console, {\n                        log: N({}, e, {\n                            value: K\n                        }),\n                        info: N({}, e, {\n                            value: D\n                        }),\n                        warn: N({}, e, {\n                            value: Fe\n                        }),\n                        error: N({}, e, {\n                            value: ae\n                        }),\n                        group: N({}, e, {\n                            value: ie\n                        }),\n                        groupCollapsed: N({}, e, {\n                            value: De\n                        }),\n                        groupEnd: N({}, e, {\n                            value: z\n                        })\n                    });\n                }\n                P < 0 && v(\"disabledDepth fell below zero. This is a bug in React. Please file an issue.\");\n            }\n        }\n        var ye = U.ReactCurrentDispatcher, ne;\n        function ue(e, t, r) {\n            {\n                if (ne === void 0) try {\n                    throw Error();\n                } catch (l) {\n                    var n = l.stack.trim().match(/\\n( *(at )?)/);\n                    ne = n && n[1] || \"\";\n                }\n                return `\n` + ne + e;\n            }\n        }\n        var $ = !1, I;\n        {\n            var we = typeof WeakMap == \"function\" ? WeakMap : Map;\n            I = new we();\n        }\n        function Ae(e, t) {\n            if (!e || $) return \"\";\n            {\n                var r = I.get(e);\n                if (r !== void 0) return r;\n            }\n            var n;\n            $ = !0;\n            var l = Error.prepareStackTrace;\n            Error.prepareStackTrace = void 0;\n            var c;\n            c = ye.current, ye.current = null, Oe();\n            try {\n                if (t) {\n                    var s = function() {\n                        throw Error();\n                    };\n                    if (Object.defineProperty(s.prototype, \"props\", {\n                        set: function() {\n                            throw Error();\n                        }\n                    }), typeof Reflect == \"object\" && Reflect.construct) {\n                        try {\n                            Reflect.construct(s, []);\n                        } catch (q) {\n                            n = q;\n                        }\n                        Reflect.construct(e, [], s);\n                    } else {\n                        try {\n                            s.call();\n                        } catch (q) {\n                            n = q;\n                        }\n                        e.call(s.prototype);\n                    }\n                } else {\n                    try {\n                        throw Error();\n                    } catch (q) {\n                        n = q;\n                    }\n                    e();\n                }\n            } catch (q) {\n                if (q && n && typeof q.stack == \"string\") {\n                    for(var a = q.stack.split(`\n`), O = n.stack.split(`\n`), y = a.length - 1, m = O.length - 1; y >= 1 && m >= 0 && a[y] !== O[m];)m--;\n                    for(; y >= 1 && m >= 0; y--, m--)if (a[y] !== O[m]) {\n                        if (y !== 1 || m !== 1) do if (y--, m--, m < 0 || a[y] !== O[m]) {\n                            var L = `\n` + a[y].replace(\" at new \", \" at \");\n                            return e.displayName && L.includes(\"<anonymous>\") && (L = L.replace(\"<anonymous>\", e.displayName)), typeof e == \"function\" && I.set(e, L), L;\n                        }\n                        while (y >= 1 && m >= 0);\n                        break;\n                    }\n                }\n            } finally{\n                $ = !1, ye.current = c, A(), Error.prepareStackTrace = l;\n            }\n            var ge = e ? e.displayName || e.name : \"\", tt = ge ? ue(ge) : \"\";\n            return typeof e == \"function\" && I.set(e, tt), tt;\n        }\n        function W(e, t, r) {\n            return Ae(e, !1);\n        }\n        function E(e) {\n            var t = e.prototype;\n            return !!(t && t.isReactComponent);\n        }\n        function b(e, t, r) {\n            if (e == null) return \"\";\n            if (typeof e == \"function\") return Ae(e, E(e));\n            if (typeof e == \"string\") return ue(e);\n            switch(e){\n                case X:\n                    return ue(\"Suspense\");\n                case g:\n                    return ue(\"SuspenseList\");\n            }\n            if (typeof e == \"object\") switch(e.$$typeof){\n                case f:\n                    return W(e.render);\n                case F:\n                    return b(e.type, t, r);\n                case x:\n                    {\n                        var n = e, l = n._payload, c = n._init;\n                        try {\n                            return b(c(l), t, r);\n                        } catch  {}\n                    }\n            }\n            return \"\";\n        }\n        var w = Object.prototype.hasOwnProperty, oe = {}, h = U.ReactDebugCurrentFrame;\n        function T(e) {\n            if (e) {\n                var t = e._owner, r = b(e.type, e._source, t ? t.type : null);\n                h.setExtraStackFrame(r);\n            } else h.setExtraStackFrame(null);\n        }\n        function ke(e, t, r, n, l) {\n            {\n                var c = Function.call.bind(w);\n                for(var s in e)if (c(e, s)) {\n                    var a = void 0;\n                    try {\n                        if (typeof e[s] != \"function\") {\n                            var O = Error((n || \"React class\") + \": \" + r + \" type `\" + s + \"` is invalid; it must be a function, usually from the `prop-types` package, but received `\" + typeof e[s] + \"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                            throw O.name = \"Invariant Violation\", O;\n                        }\n                        a = e[s](t, s, n, r, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n                    } catch (y) {\n                        a = y;\n                    }\n                    a && !(a instanceof Error) && (T(l), v(\"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).\", n || \"React class\", r, s, typeof a), T(null)), a instanceof Error && !(a.message in oe) && (oe[a.message] = !0, T(l), v(\"Failed %s type: %s\", r, a.message), T(null));\n                }\n            }\n        }\n        var Re = Array.isArray;\n        function Ie(e) {\n            return Re(e);\n        }\n        function Qe(e) {\n            {\n                var t = typeof Symbol == \"function\" && Symbol.toStringTag, r = t && e[Symbol.toStringTag] || e.constructor.name || \"Object\";\n                return r;\n            }\n        }\n        function Je(e) {\n            try {\n                return G(e), !1;\n            } catch  {\n                return !0;\n            }\n        }\n        function G(e) {\n            return \"\" + e;\n        }\n        function xe(e) {\n            if (Je(e)) return v(\"The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.\", Qe(e)), G(e);\n        }\n        var H = U.ReactCurrentOwner, _e = {\n            key: !0,\n            ref: !0,\n            __self: !0,\n            __source: !0\n        }, se, ee, te;\n        te = {};\n        function Ze(e) {\n            if (w.call(e, \"ref\")) {\n                var t = Object.getOwnPropertyDescriptor(e, \"ref\").get;\n                if (t && t.isReactWarning) return !1;\n            }\n            return e.ref !== void 0;\n        }\n        function et(e) {\n            if (w.call(e, \"key\")) {\n                var t = Object.getOwnPropertyDescriptor(e, \"key\").get;\n                if (t && t.isReactWarning) return !1;\n            }\n            return e.key !== void 0;\n        }\n        function qe(e, t) {\n            if (typeof e.ref == \"string\" && H.current && t && H.current.stateNode !== t) {\n                var r = M(H.current.type);\n                te[r] || (v('Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', M(H.current.type), e.ref), te[r] = !0);\n            }\n        }\n        function Ke(e, t) {\n            {\n                var r = function() {\n                    se || (se = !0, v(\"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", t));\n                };\n                r.isReactWarning = !0, Object.defineProperty(e, \"key\", {\n                    get: r,\n                    configurable: !0\n                });\n            }\n        }\n        function le(e, t) {\n            {\n                var r = function() {\n                    ee || (ee = !0, v(\"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", t));\n                };\n                r.isReactWarning = !0, Object.defineProperty(e, \"ref\", {\n                    get: r,\n                    configurable: !0\n                });\n            }\n        }\n        var fe = function(e, t, r, n, l, c, s) {\n            var a = {\n                // This tag allows us to uniquely identify this as a React Element\n                $$typeof: u,\n                // Built-in properties that belong on the element\n                type: e,\n                key: t,\n                ref: r,\n                props: s,\n                // Record the component responsible for creating this element.\n                _owner: c\n            };\n            return a._store = {}, Object.defineProperty(a._store, \"validated\", {\n                configurable: !1,\n                enumerable: !1,\n                writable: !0,\n                value: !1\n            }), Object.defineProperty(a, \"_self\", {\n                configurable: !1,\n                enumerable: !1,\n                writable: !1,\n                value: n\n            }), Object.defineProperty(a, \"_source\", {\n                configurable: !1,\n                enumerable: !1,\n                writable: !1,\n                value: l\n            }), Object.freeze && (Object.freeze(a.props), Object.freeze(a)), a;\n        };\n        function Le(e, t, r, n, l) {\n            {\n                var c, s = {}, a = null, O = null;\n                r !== void 0 && (xe(r), a = \"\" + r), et(t) && (xe(t.key), a = \"\" + t.key), Ze(t) && (O = t.ref, qe(t, l));\n                for(c in t)w.call(t, c) && !_e.hasOwnProperty(c) && (s[c] = t[c]);\n                if (e && e.defaultProps) {\n                    var y = e.defaultProps;\n                    for(c in y)s[c] === void 0 && (s[c] = y[c]);\n                }\n                if (a || O) {\n                    var m = typeof e == \"function\" ? e.displayName || e.name || \"Unknown\" : e;\n                    a && Ke(s, m), O && le(s, m);\n                }\n                return fe(e, a, O, l, n, H.current, s);\n            }\n        }\n        var pe = U.ReactCurrentOwner, me = U.ReactDebugCurrentFrame;\n        function re(e) {\n            if (e) {\n                var t = e._owner, r = b(e.type, e._source, t ? t.type : null);\n                me.setExtraStackFrame(r);\n            } else me.setExtraStackFrame(null);\n        }\n        var de;\n        de = !1;\n        function ce(e) {\n            return typeof e == \"object\" && e !== null && e.$$typeof === u;\n        }\n        function ve() {\n            {\n                if (pe.current) {\n                    var e = M(pe.current.type);\n                    if (e) return `\n\nCheck the render method of \\`` + e + \"`.\";\n                }\n                return \"\";\n            }\n        }\n        function Be(e) {\n            {\n                if (e !== void 0) {\n                    var t = e.fileName.replace(/^.*[\\\\\\/]/, \"\"), r = e.lineNumber;\n                    return `\n\nCheck your code at ` + t + \":\" + r + \".\";\n                }\n                return \"\";\n            }\n        }\n        var $e = {};\n        function Ye(e) {\n            {\n                var t = ve();\n                if (!t) {\n                    var r = typeof e == \"string\" ? e : e.displayName || e.name;\n                    r && (t = `\n\nCheck the top-level render call using <` + r + \">.\");\n                }\n                return t;\n            }\n        }\n        function Pe(e, t) {\n            {\n                if (!e._store || e._store.validated || e.key != null) return;\n                e._store.validated = !0;\n                var r = Ye(t);\n                if ($e[r]) return;\n                $e[r] = !0;\n                var n = \"\";\n                e && e._owner && e._owner !== pe.current && (n = \" It was passed a child from \" + M(e._owner.type) + \".\"), re(e), v('Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', r, n), re(null);\n            }\n        }\n        function Ce(e, t) {\n            {\n                if (typeof e != \"object\") return;\n                if (Ie(e)) for(var r = 0; r < e.length; r++){\n                    var n = e[r];\n                    ce(n) && Pe(n, t);\n                }\n                else if (ce(e)) e._store && (e._store.validated = !0);\n                else if (e) {\n                    var l = Se(e);\n                    if (typeof l == \"function\" && l !== e.entries) for(var c = l.call(e), s; !(s = c.next()).done;)ce(s.value) && Pe(s.value, t);\n                }\n            }\n        }\n        function Xe(e) {\n            {\n                var t = e.type;\n                if (t == null || typeof t == \"string\") return;\n                var r;\n                if (typeof t == \"function\") r = t.propTypes;\n                else if (typeof t == \"object\" && (t.$$typeof === f || // Note: Memo only checks outer props here.\n                // Inner props are checked in the reconciler.\n                t.$$typeof === F)) r = t.propTypes;\n                else return;\n                if (r) {\n                    var n = M(t);\n                    ke(r, e.props, \"prop\", n, e);\n                } else if (t.PropTypes !== void 0 && !de) {\n                    de = !0;\n                    var l = M(t);\n                    v(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", l || \"Unknown\");\n                }\n                typeof t.getDefaultProps == \"function\" && !t.getDefaultProps.isReactClassApproved && v(\"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.\");\n            }\n        }\n        function We(e) {\n            {\n                for(var t = Object.keys(e.props), r = 0; r < t.length; r++){\n                    var n = t[r];\n                    if (n !== \"children\" && n !== \"key\") {\n                        re(e), v(\"Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.\", n), re(null);\n                        break;\n                    }\n                }\n                e.ref !== null && (re(e), v(\"Invalid attribute `ref` supplied to `React.Fragment`.\"), re(null));\n            }\n        }\n        function Ue(e, t, r, n, l, c) {\n            {\n                var s = J(e);\n                if (!s) {\n                    var a = \"\";\n                    (e === void 0 || typeof e == \"object\" && e !== null && Object.keys(e).length === 0) && (a += \" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\");\n                    var O = Be(l);\n                    O ? a += O : a += ve();\n                    var y;\n                    e === null ? y = \"null\" : Ie(e) ? y = \"array\" : e !== void 0 && e.$$typeof === u ? (y = \"<\" + (M(e.type) || \"Unknown\") + \" />\", a = \" Did you accidentally export a JSX literal instead of a component?\") : y = typeof e, v(\"React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s\", y, a);\n                }\n                var m = Le(e, t, r, l, c);\n                if (m == null) return m;\n                if (s) {\n                    var L = t.children;\n                    if (L !== void 0) if (n) if (Ie(L)) {\n                        for(var ge = 0; ge < L.length; ge++)Ce(L[ge], e);\n                        Object.freeze && Object.freeze(L);\n                    } else v(\"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\");\n                    else Ce(L, e);\n                }\n                return e === d ? We(m) : Xe(m), m;\n            }\n        }\n        function i(e, t, r) {\n            return Ue(e, t, r, !0);\n        }\n        function p(e, t, r) {\n            return Ue(e, t, r, !1);\n        }\n        var S = p, Ve = i;\n        gt.Fragment = d, gt.jsx = S, gt.jsxs = Ve;\n    }()), gt;\n}\n false ? 0 : Rt.exports = ar();\nvar ir = Rt.exports, Tt = {\n    exports: {}\n}, vt = {};\n/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var Lt;\nfunction sr() {\n    if (Lt) return vt;\n    Lt = 1;\n    var o = react__WEBPACK_IMPORTED_MODULE_0__, u = Symbol.for(\"react.element\"), k = Symbol.for(\"react.fragment\"), d = Object.prototype.hasOwnProperty, R = o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, _ = {\n        key: !0,\n        ref: !0,\n        __self: !0,\n        __source: !0\n    };\n    function Y(j, f, X) {\n        var g, F = {}, x = null, Q = null;\n        X !== void 0 && (x = \"\" + X), f.key !== void 0 && (x = \"\" + f.key), f.ref !== void 0 && (Q = f.ref);\n        for(g in f)d.call(f, g) && !_.hasOwnProperty(g) && (F[g] = f[g]);\n        if (j && j.defaultProps) for(g in f = j.defaultProps, f)F[g] === void 0 && (F[g] = f[g]);\n        return {\n            $$typeof: u,\n            type: j,\n            key: x,\n            ref: Q,\n            props: F,\n            _owner: R.current\n        };\n    }\n    return vt.Fragment = k, vt.jsx = Y, vt.jsxs = Y, vt;\n}\nvar ht = {};\n/**\n * @license React\n * react-jsx-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var Dt;\nfunction lr() {\n    return Dt || (Dt = 1,  true && function() {\n        var o = react__WEBPACK_IMPORTED_MODULE_0__, u = Symbol.for(\"react.element\"), k = Symbol.for(\"react.portal\"), d = Symbol.for(\"react.fragment\"), R = Symbol.for(\"react.strict_mode\"), _ = Symbol.for(\"react.profiler\"), Y = Symbol.for(\"react.provider\"), j = Symbol.for(\"react.context\"), f = Symbol.for(\"react.forward_ref\"), X = Symbol.for(\"react.suspense\"), g = Symbol.for(\"react.suspense_list\"), F = Symbol.for(\"react.memo\"), x = Symbol.for(\"react.lazy\"), Q = Symbol.for(\"react.offscreen\"), Me = Symbol.iterator, he = \"@@iterator\";\n        function Se(e) {\n            if (e === null || typeof e != \"object\") return null;\n            var t = Me && e[Me] || e[he];\n            return typeof t == \"function\" ? t : null;\n        }\n        var U = o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        function v(e) {\n            {\n                for(var t = arguments.length, r = new Array(t > 1 ? t - 1 : 0), n = 1; n < t; n++)r[n - 1] = arguments[n];\n                Ne(\"error\", e, r);\n            }\n        }\n        function Ne(e, t, r) {\n            {\n                var n = U.ReactDebugCurrentFrame, l = n.getStackAddendum();\n                l !== \"\" && (t += \"%s\", r = r.concat([\n                    l\n                ]));\n                var c = r.map(function(s) {\n                    return String(s);\n                });\n                c.unshift(\"Warning: \" + t), Function.prototype.apply.call(console[e], console, c);\n            }\n        }\n        var Te = !1, je = !1, Ge = !1, be = !1, ze = !1, Ee;\n        Ee = Symbol.for(\"react.module.reference\");\n        function J(e) {\n            return !!(typeof e == \"string\" || typeof e == \"function\" || e === d || e === _ || ze || e === R || e === X || e === g || be || e === Q || Te || je || Ge || typeof e == \"object\" && e !== null && (e.$$typeof === x || e.$$typeof === F || e.$$typeof === Y || e.$$typeof === j || e.$$typeof === f || // This needs to include all possible module reference object\n            // types supported by any Flight configuration anywhere since\n            // we don't know which Flight build this will end up being used\n            // with.\n            e.$$typeof === Ee || e.getModuleId !== void 0));\n        }\n        function Z(e, t, r) {\n            var n = e.displayName;\n            if (n) return n;\n            var l = t.displayName || t.name || \"\";\n            return l !== \"\" ? r + \"(\" + l + \")\" : r;\n        }\n        function B(e) {\n            return e.displayName || \"Context\";\n        }\n        function M(e) {\n            if (e == null) return null;\n            if (typeof e.tag == \"number\" && v(\"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"), typeof e == \"function\") return e.displayName || e.name || null;\n            if (typeof e == \"string\") return e;\n            switch(e){\n                case d:\n                    return \"Fragment\";\n                case k:\n                    return \"Portal\";\n                case _:\n                    return \"Profiler\";\n                case R:\n                    return \"StrictMode\";\n                case X:\n                    return \"Suspense\";\n                case g:\n                    return \"SuspenseList\";\n            }\n            if (typeof e == \"object\") switch(e.$$typeof){\n                case j:\n                    var t = e;\n                    return B(t) + \".Consumer\";\n                case Y:\n                    var r = e;\n                    return B(r._context) + \".Provider\";\n                case f:\n                    return Z(e, e.render, \"ForwardRef\");\n                case F:\n                    var n = e.displayName || null;\n                    return n !== null ? n : M(e.type) || \"Memo\";\n                case x:\n                    {\n                        var l = e, c = l._payload, s = l._init;\n                        try {\n                            return M(s(c));\n                        } catch  {\n                            return null;\n                        }\n                    }\n            }\n            return null;\n        }\n        var N = Object.assign, P = 0, K, D, Fe, ae, ie, De, z;\n        function V() {}\n        V.__reactDisabledLog = !0;\n        function Oe() {\n            {\n                if (P === 0) {\n                    K = console.log, D = console.info, Fe = console.warn, ae = console.error, ie = console.group, De = console.groupCollapsed, z = console.groupEnd;\n                    var e = {\n                        configurable: !0,\n                        enumerable: !0,\n                        value: V,\n                        writable: !0\n                    };\n                    Object.defineProperties(console, {\n                        info: e,\n                        log: e,\n                        warn: e,\n                        error: e,\n                        group: e,\n                        groupCollapsed: e,\n                        groupEnd: e\n                    });\n                }\n                P++;\n            }\n        }\n        function A() {\n            {\n                if (P--, P === 0) {\n                    var e = {\n                        configurable: !0,\n                        enumerable: !0,\n                        writable: !0\n                    };\n                    Object.defineProperties(console, {\n                        log: N({}, e, {\n                            value: K\n                        }),\n                        info: N({}, e, {\n                            value: D\n                        }),\n                        warn: N({}, e, {\n                            value: Fe\n                        }),\n                        error: N({}, e, {\n                            value: ae\n                        }),\n                        group: N({}, e, {\n                            value: ie\n                        }),\n                        groupCollapsed: N({}, e, {\n                            value: De\n                        }),\n                        groupEnd: N({}, e, {\n                            value: z\n                        })\n                    });\n                }\n                P < 0 && v(\"disabledDepth fell below zero. This is a bug in React. Please file an issue.\");\n            }\n        }\n        var ye = U.ReactCurrentDispatcher, ne;\n        function ue(e, t, r) {\n            {\n                if (ne === void 0) try {\n                    throw Error();\n                } catch (l) {\n                    var n = l.stack.trim().match(/\\n( *(at )?)/);\n                    ne = n && n[1] || \"\";\n                }\n                return `\n` + ne + e;\n            }\n        }\n        var $ = !1, I;\n        {\n            var we = typeof WeakMap == \"function\" ? WeakMap : Map;\n            I = new we();\n        }\n        function Ae(e, t) {\n            if (!e || $) return \"\";\n            {\n                var r = I.get(e);\n                if (r !== void 0) return r;\n            }\n            var n;\n            $ = !0;\n            var l = Error.prepareStackTrace;\n            Error.prepareStackTrace = void 0;\n            var c;\n            c = ye.current, ye.current = null, Oe();\n            try {\n                if (t) {\n                    var s = function() {\n                        throw Error();\n                    };\n                    if (Object.defineProperty(s.prototype, \"props\", {\n                        set: function() {\n                            throw Error();\n                        }\n                    }), typeof Reflect == \"object\" && Reflect.construct) {\n                        try {\n                            Reflect.construct(s, []);\n                        } catch (q) {\n                            n = q;\n                        }\n                        Reflect.construct(e, [], s);\n                    } else {\n                        try {\n                            s.call();\n                        } catch (q) {\n                            n = q;\n                        }\n                        e.call(s.prototype);\n                    }\n                } else {\n                    try {\n                        throw Error();\n                    } catch (q) {\n                        n = q;\n                    }\n                    e();\n                }\n            } catch (q) {\n                if (q && n && typeof q.stack == \"string\") {\n                    for(var a = q.stack.split(`\n`), O = n.stack.split(`\n`), y = a.length - 1, m = O.length - 1; y >= 1 && m >= 0 && a[y] !== O[m];)m--;\n                    for(; y >= 1 && m >= 0; y--, m--)if (a[y] !== O[m]) {\n                        if (y !== 1 || m !== 1) do if (y--, m--, m < 0 || a[y] !== O[m]) {\n                            var L = `\n` + a[y].replace(\" at new \", \" at \");\n                            return e.displayName && L.includes(\"<anonymous>\") && (L = L.replace(\"<anonymous>\", e.displayName)), typeof e == \"function\" && I.set(e, L), L;\n                        }\n                        while (y >= 1 && m >= 0);\n                        break;\n                    }\n                }\n            } finally{\n                $ = !1, ye.current = c, A(), Error.prepareStackTrace = l;\n            }\n            var ge = e ? e.displayName || e.name : \"\", tt = ge ? ue(ge) : \"\";\n            return typeof e == \"function\" && I.set(e, tt), tt;\n        }\n        function W(e, t, r) {\n            return Ae(e, !1);\n        }\n        function E(e) {\n            var t = e.prototype;\n            return !!(t && t.isReactComponent);\n        }\n        function b(e, t, r) {\n            if (e == null) return \"\";\n            if (typeof e == \"function\") return Ae(e, E(e));\n            if (typeof e == \"string\") return ue(e);\n            switch(e){\n                case X:\n                    return ue(\"Suspense\");\n                case g:\n                    return ue(\"SuspenseList\");\n            }\n            if (typeof e == \"object\") switch(e.$$typeof){\n                case f:\n                    return W(e.render);\n                case F:\n                    return b(e.type, t, r);\n                case x:\n                    {\n                        var n = e, l = n._payload, c = n._init;\n                        try {\n                            return b(c(l), t, r);\n                        } catch  {}\n                    }\n            }\n            return \"\";\n        }\n        var w = Object.prototype.hasOwnProperty, oe = {}, h = U.ReactDebugCurrentFrame;\n        function T(e) {\n            if (e) {\n                var t = e._owner, r = b(e.type, e._source, t ? t.type : null);\n                h.setExtraStackFrame(r);\n            } else h.setExtraStackFrame(null);\n        }\n        function ke(e, t, r, n, l) {\n            {\n                var c = Function.call.bind(w);\n                for(var s in e)if (c(e, s)) {\n                    var a = void 0;\n                    try {\n                        if (typeof e[s] != \"function\") {\n                            var O = Error((n || \"React class\") + \": \" + r + \" type `\" + s + \"` is invalid; it must be a function, usually from the `prop-types` package, but received `\" + typeof e[s] + \"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                            throw O.name = \"Invariant Violation\", O;\n                        }\n                        a = e[s](t, s, n, r, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n                    } catch (y) {\n                        a = y;\n                    }\n                    a && !(a instanceof Error) && (T(l), v(\"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).\", n || \"React class\", r, s, typeof a), T(null)), a instanceof Error && !(a.message in oe) && (oe[a.message] = !0, T(l), v(\"Failed %s type: %s\", r, a.message), T(null));\n                }\n            }\n        }\n        var Re = Array.isArray;\n        function Ie(e) {\n            return Re(e);\n        }\n        function Qe(e) {\n            {\n                var t = typeof Symbol == \"function\" && Symbol.toStringTag, r = t && e[Symbol.toStringTag] || e.constructor.name || \"Object\";\n                return r;\n            }\n        }\n        function Je(e) {\n            try {\n                return G(e), !1;\n            } catch  {\n                return !0;\n            }\n        }\n        function G(e) {\n            return \"\" + e;\n        }\n        function xe(e) {\n            if (Je(e)) return v(\"The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.\", Qe(e)), G(e);\n        }\n        var H = U.ReactCurrentOwner, _e = {\n            key: !0,\n            ref: !0,\n            __self: !0,\n            __source: !0\n        }, se, ee, te;\n        te = {};\n        function Ze(e) {\n            if (w.call(e, \"ref\")) {\n                var t = Object.getOwnPropertyDescriptor(e, \"ref\").get;\n                if (t && t.isReactWarning) return !1;\n            }\n            return e.ref !== void 0;\n        }\n        function et(e) {\n            if (w.call(e, \"key\")) {\n                var t = Object.getOwnPropertyDescriptor(e, \"key\").get;\n                if (t && t.isReactWarning) return !1;\n            }\n            return e.key !== void 0;\n        }\n        function qe(e, t) {\n            if (typeof e.ref == \"string\" && H.current && t && H.current.stateNode !== t) {\n                var r = M(H.current.type);\n                te[r] || (v('Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', M(H.current.type), e.ref), te[r] = !0);\n            }\n        }\n        function Ke(e, t) {\n            {\n                var r = function() {\n                    se || (se = !0, v(\"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", t));\n                };\n                r.isReactWarning = !0, Object.defineProperty(e, \"key\", {\n                    get: r,\n                    configurable: !0\n                });\n            }\n        }\n        function le(e, t) {\n            {\n                var r = function() {\n                    ee || (ee = !0, v(\"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", t));\n                };\n                r.isReactWarning = !0, Object.defineProperty(e, \"ref\", {\n                    get: r,\n                    configurable: !0\n                });\n            }\n        }\n        var fe = function(e, t, r, n, l, c, s) {\n            var a = {\n                // This tag allows us to uniquely identify this as a React Element\n                $$typeof: u,\n                // Built-in properties that belong on the element\n                type: e,\n                key: t,\n                ref: r,\n                props: s,\n                // Record the component responsible for creating this element.\n                _owner: c\n            };\n            return a._store = {}, Object.defineProperty(a._store, \"validated\", {\n                configurable: !1,\n                enumerable: !1,\n                writable: !0,\n                value: !1\n            }), Object.defineProperty(a, \"_self\", {\n                configurable: !1,\n                enumerable: !1,\n                writable: !1,\n                value: n\n            }), Object.defineProperty(a, \"_source\", {\n                configurable: !1,\n                enumerable: !1,\n                writable: !1,\n                value: l\n            }), Object.freeze && (Object.freeze(a.props), Object.freeze(a)), a;\n        };\n        function Le(e, t, r, n, l) {\n            {\n                var c, s = {}, a = null, O = null;\n                r !== void 0 && (xe(r), a = \"\" + r), et(t) && (xe(t.key), a = \"\" + t.key), Ze(t) && (O = t.ref, qe(t, l));\n                for(c in t)w.call(t, c) && !_e.hasOwnProperty(c) && (s[c] = t[c]);\n                if (e && e.defaultProps) {\n                    var y = e.defaultProps;\n                    for(c in y)s[c] === void 0 && (s[c] = y[c]);\n                }\n                if (a || O) {\n                    var m = typeof e == \"function\" ? e.displayName || e.name || \"Unknown\" : e;\n                    a && Ke(s, m), O && le(s, m);\n                }\n                return fe(e, a, O, l, n, H.current, s);\n            }\n        }\n        var pe = U.ReactCurrentOwner, me = U.ReactDebugCurrentFrame;\n        function re(e) {\n            if (e) {\n                var t = e._owner, r = b(e.type, e._source, t ? t.type : null);\n                me.setExtraStackFrame(r);\n            } else me.setExtraStackFrame(null);\n        }\n        var de;\n        de = !1;\n        function ce(e) {\n            return typeof e == \"object\" && e !== null && e.$$typeof === u;\n        }\n        function ve() {\n            {\n                if (pe.current) {\n                    var e = M(pe.current.type);\n                    if (e) return `\n\nCheck the render method of \\`` + e + \"`.\";\n                }\n                return \"\";\n            }\n        }\n        function Be(e) {\n            {\n                if (e !== void 0) {\n                    var t = e.fileName.replace(/^.*[\\\\\\/]/, \"\"), r = e.lineNumber;\n                    return `\n\nCheck your code at ` + t + \":\" + r + \".\";\n                }\n                return \"\";\n            }\n        }\n        var $e = {};\n        function Ye(e) {\n            {\n                var t = ve();\n                if (!t) {\n                    var r = typeof e == \"string\" ? e : e.displayName || e.name;\n                    r && (t = `\n\nCheck the top-level render call using <` + r + \">.\");\n                }\n                return t;\n            }\n        }\n        function Pe(e, t) {\n            {\n                if (!e._store || e._store.validated || e.key != null) return;\n                e._store.validated = !0;\n                var r = Ye(t);\n                if ($e[r]) return;\n                $e[r] = !0;\n                var n = \"\";\n                e && e._owner && e._owner !== pe.current && (n = \" It was passed a child from \" + M(e._owner.type) + \".\"), re(e), v('Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', r, n), re(null);\n            }\n        }\n        function Ce(e, t) {\n            {\n                if (typeof e != \"object\") return;\n                if (Ie(e)) for(var r = 0; r < e.length; r++){\n                    var n = e[r];\n                    ce(n) && Pe(n, t);\n                }\n                else if (ce(e)) e._store && (e._store.validated = !0);\n                else if (e) {\n                    var l = Se(e);\n                    if (typeof l == \"function\" && l !== e.entries) for(var c = l.call(e), s; !(s = c.next()).done;)ce(s.value) && Pe(s.value, t);\n                }\n            }\n        }\n        function Xe(e) {\n            {\n                var t = e.type;\n                if (t == null || typeof t == \"string\") return;\n                var r;\n                if (typeof t == \"function\") r = t.propTypes;\n                else if (typeof t == \"object\" && (t.$$typeof === f || // Note: Memo only checks outer props here.\n                // Inner props are checked in the reconciler.\n                t.$$typeof === F)) r = t.propTypes;\n                else return;\n                if (r) {\n                    var n = M(t);\n                    ke(r, e.props, \"prop\", n, e);\n                } else if (t.PropTypes !== void 0 && !de) {\n                    de = !0;\n                    var l = M(t);\n                    v(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", l || \"Unknown\");\n                }\n                typeof t.getDefaultProps == \"function\" && !t.getDefaultProps.isReactClassApproved && v(\"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.\");\n            }\n        }\n        function We(e) {\n            {\n                for(var t = Object.keys(e.props), r = 0; r < t.length; r++){\n                    var n = t[r];\n                    if (n !== \"children\" && n !== \"key\") {\n                        re(e), v(\"Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.\", n), re(null);\n                        break;\n                    }\n                }\n                e.ref !== null && (re(e), v(\"Invalid attribute `ref` supplied to `React.Fragment`.\"), re(null));\n            }\n        }\n        function Ue(e, t, r, n, l, c) {\n            {\n                var s = J(e);\n                if (!s) {\n                    var a = \"\";\n                    (e === void 0 || typeof e == \"object\" && e !== null && Object.keys(e).length === 0) && (a += \" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\");\n                    var O = Be(l);\n                    O ? a += O : a += ve();\n                    var y;\n                    e === null ? y = \"null\" : Ie(e) ? y = \"array\" : e !== void 0 && e.$$typeof === u ? (y = \"<\" + (M(e.type) || \"Unknown\") + \" />\", a = \" Did you accidentally export a JSX literal instead of a component?\") : y = typeof e, v(\"React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s\", y, a);\n                }\n                var m = Le(e, t, r, l, c);\n                if (m == null) return m;\n                if (s) {\n                    var L = t.children;\n                    if (L !== void 0) if (n) if (Ie(L)) {\n                        for(var ge = 0; ge < L.length; ge++)Ce(L[ge], e);\n                        Object.freeze && Object.freeze(L);\n                    } else v(\"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\");\n                    else Ce(L, e);\n                }\n                return e === d ? We(m) : Xe(m), m;\n            }\n        }\n        function i(e, t, r) {\n            return Ue(e, t, r, !0);\n        }\n        function p(e, t, r) {\n            return Ue(e, t, r, !1);\n        }\n        var S = p, Ve = i;\n        ht.Fragment = d, ht.jsx = S, ht.jsxs = Ve;\n    }()), ht;\n}\n false ? 0 : Tt.exports = lr();\nvar it = Tt.exports;\nconst ot = (o, u, k)=>o < u ? u : o > k ? k : o, cr = (o, u, k)=>{\n    let d = 0;\n    return u === \"top\" ? d = (o.offsetY * 2 - 1) * -1 : u === \"bottom\" ? d = (o.offsetY - 0.5) * 2 : u === \"left\" ? d = (o.offsetX * 2 - 1) * -1 : u === \"right\" ? d = (o.offsetX - 0.5) * 2 : u === \"all\" && (d = Math.max(Math.abs(o.offsetX - 0.5) * 2, Math.abs(o.offsetY - 0.5) * 2)), (d * k).toFixed(2);\n}, ur = (o, u, k)=>{\n    let d = o.offsetX, R = o.offsetY;\n    k || (d = 1 - d, R = 1 - R);\n    let _ = \"translateX(0%) translateY(0%)\";\n    return u === \"top\" ? _ = `translateX( ${d * 50}% )` : u === \"bottom\" ? _ = `translateX( ${d * 50}% ) translateY(50%)` : u === \"left\" ? _ = `translateY( ${R * 50}% )` : u === \"right\" ? _ = `translateX(50%) translateY( ${R * 50}% ) ` : u === \"all\" && (_ = `translateX(${(d - 0.5) * 50}%) translateY(${(R - 0.5) * 50}%) `), _;\n}, Nt = (o)=>{\n    if (!o) return \"translateX(0%) translateY(0%)\";\n    switch(o){\n        case \"top-left\":\n            o = {\n                left: \"25%\",\n                top: \"25%\"\n            };\n            break;\n        case \"top-right\":\n            o = {\n                left: \"75%\",\n                top: \"25%\"\n            };\n            break;\n        case \"bottom-left\":\n            o = {\n                left: \"25%\",\n                top: \"75%\"\n            };\n            break;\n        case \"bottom-right\":\n            o = {\n                left: \"75%\",\n                top: \"75%\"\n            };\n            break;\n        case \"center\":\n            o = {\n                left: \"50%\",\n                top: \"50%\"\n            };\n            break;\n    }\n    const u = o.left.includes(\"%\") ? String(parseInt(o.left) / 2) + \"%\" : o.left, k = o.top.includes(\"%\") ? String(parseInt(o.top) / 2) + \"%\" : o.top;\n    return `translateX(${u}) translateY(${k})`;\n}, fr = (o, u, k)=>{\n    let d = o.offsetX, R = o.offsetY;\n    u === \"top-right\" && (d = 1 - d), u === \"bottom-left\" && (R = 1 - R), u === \"bottom-right\" && (d = 1 - d, R = 1 - R);\n    let _ = 0;\n    return k ? _ = ((d + R) * (3 / 2) - 1) * 100 : _ = ((d + R) * (-3 / 2) + 0.5) * 100, `translateX(${_}%)`;\n}, Yt = (o, u)=>{\n    if (!u) return `translateX(${o ? \"50%\" : \"-100%\"})`;\n    switch(u){\n        case \"left\":\n            u = {\n                left: \"25%\"\n            };\n            break;\n        case \"center\":\n            u = {\n                left: \"50%\"\n            };\n            break;\n        case \"right\":\n            u = {\n                left: \"75%\"\n            };\n            break;\n    }\n    return `translateX(${u.left.includes(\"%\") ? String(parseInt(u.left) / 2) + \"%\" : u.left})`;\n}, Xt = (o)=>{\n    if (o instanceof HTMLElement) return o;\n    if (o instanceof Document) return document.documentElement;\n    if (o.current && o.current instanceof Object && \"element\" in o.current && o.current.element instanceof HTMLElement) return o.current.element;\n    if (o.current && o.current instanceof HTMLElement) return o.current;\n}, pr = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ width: o, height: u, borderRadius: k, perspective: d = \"1000px\", scale: R = 1, shadowEnable: _ = !1, shadow: Y = \"0 0 1rem rgba(0,0,0,0.5)\", shadowType: j = \"box\", lineGlareEnable: f = !0, lineGlareBlurEnable: X = !0, lineGlareBlurAmount: g = \"4px\", lineGlareMaxOpacity: F = 0.1, lineGlareWidthPercent: x = 10, lineGlareMixBlendMode: Q = \"normal\", lineGlareColor: Me = \"white\", lineGlareReverse: he = !1, lineGlareDirection: Se = \"to-bottom-right\", lineGlareHoverPosition: U = \"top-left\", lineGlareFixedPosition: v = void 0, spotGlareEnable: Ne = !0, spotGlareSizePercent: Te = 200, spotGlareMaxOpacity: je = 0.5, spotGlareMixBlendMode: Ge = \"normal\", spotGlarePosition: be = \"top\", spotGlareColor: ze = \"white\", spotGlareReverse: Ee = !1, spotGlareFixedPosition: J = void 0, tiltMaxAngleX: Z = 20, tiltMaxAngleY: B = 20, tiltReverse: M = !1, tiltReset: N = !0, initialAngleX: P = 0, initialAngleY: K = 0, disableScrollOnTouch: D = !0, style: Fe, tiltStyle: ae, tiltClass: ie, tiltProps: De, gyroMaxAngleX: z = 0, gyroMaxAngleY: V = 0, gyroReverse: Oe = !1, disabled: A = !1, disabledFilter: ye = \"grayscale(1) brightness(125%)\", CSSTransition: ne = \"all 0.4s cubic-bezier(0.03, 0.98, 0.52, 0.99)\", TiltWrapper: ue, fullPageListening: $ = !1, controlElement: I, controlElementOnly: we = !1, preserve3dEnable: Ae = !0, testIdEnable: W = !1, onTilt: E, onReset: b, onMouseEnter: w, onMouseMove: oe, onMouseLeave: h, onTouchStart: T, onTouchMove: ke, onTouchEnd: Re, children: Ie, ...Qe }, Je)=>{\n    const G = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), xe = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(!1), H = !$ && (!I || I && !we), _e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), se = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), ee = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), te = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), Ze = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({ children: i })=>/* @__PURE__ */ it.jsx(it.Fragment, {\n            children: i\n        }), []), et = ue || Ze;\n    f && (x = ot(x, 0, 50) / 2), Ne && (Te = Te < 0 ? 0 : Te / 2), Z = ot(Z, 0, 90), B = ot(B, 0, 90), z = ot(z, 0, 90), V = ot(V, 0, 90), P && (P = ot(P, -Z, Z)), K && (K = ot(K, -B, B));\n    const qe = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>f ? (100 - x) / 2 : 0, [\n        f,\n        x\n    ]), Ke = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>f ? qe + x : 0, [\n        f,\n        x,\n        qe\n    ]), le = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((i = !0)=>{\n        requestAnimationFrame(()=>{\n            se.current && (se.current.style.willChange = i ? \"transform\" : \"\"), ee.current && (ee.current.style.willChange = i ? \"transform, opacity\" : \"\"), te.current && (te.current.style.willChange = i ? \"transform\" : \"\");\n        });\n    }, []), fe = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((i = !0)=>{\n        requestAnimationFrame(()=>{\n            if (j === \"box\") se.current && _ && (se.current.style.boxShadow = i ? Y : \"\");\n            else if (_e.current && _) {\n                const p = _e.current.style.filter.replace(/(drop-shadow?\\(.*?\\))(?=\\s[a-z].*?\\(.*?\\)|\\s*$)/g, \"\");\n                _e.current.style.filter = i ? p + ` drop-shadow(${Y})` : p;\n            }\n        });\n    }, [\n        Y,\n        _,\n        j\n    ]), Le = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (!_e.current || !ee.current || !G.current || J) return;\n        const i = cr(G.current, be, je), p = ur(G.current, be, Ee);\n        requestAnimationFrame(()=>{\n            ee.current && (ee.current.style.opacity = i, ee.current.style.transform = p);\n        });\n    }, [\n        be,\n        je,\n        Ee,\n        J\n    ]), pe = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (!_e.current || !te.current || !G.current || v) return;\n        const i = fr(G.current, U, he);\n        requestAnimationFrame(()=>{\n            te.current && (te.current.style.transform = i);\n        });\n    }, [\n        U,\n        he,\n        v\n    ]), me = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((i = !0)=>{\n        if (!_e.current || !G.current) return {\n            angleX: 0,\n            angleY: 0\n        };\n        let p = -(G.current.offsetY - 0.5) * 2 * Z, S = (G.current.offsetX - 0.5) * 2 * B;\n        return M && i && (p = -p, S = -S), {\n            angleX: p,\n            angleY: S\n        };\n    }, [\n        Z,\n        B,\n        M\n    ]), re = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((i)=>{\n        const p = (i.angleY / B + 1) / 2, S = (-i.angleX / Z + 1) / 2;\n        G.current = {\n            offsetX: p,\n            offsetY: S\n        };\n    }, [\n        Z,\n        B\n    ]), de = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((i, p = !0, S = !1)=>{\n        const Ve = p ? R : 1;\n        requestAnimationFrame(()=>{\n            se.current && (se.current.style.transform = `rotateX(${i.angleX}deg) rotateY(${i.angleY}deg) scale3d(${Ve},${Ve},${Ve})`);\n        }), E && E({\n            angleX: i.angleX,\n            angleY: i.angleY\n        }, S);\n    }, [\n        E,\n        R\n    ]), ce = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((i, p = !1, S = !1)=>{\n        re(i), de(i, p, S), fe(p), pe(), Le();\n    }, [\n        re,\n        de,\n        fe,\n        pe,\n        Le\n    ]), ve = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        b && b(), P || K ? ce({\n            angleX: P || 0,\n            angleY: K || 0\n        }) : (G.current = void 0, requestAnimationFrame(()=>{\n            te.current && !v && (te.current.style.transform = Yt(he)), ee.current && !J && (ee.current.style.transform = Nt(), ee.current.style.opacity = \"0\"), se.current && (se.current.style.transform = \"rotateX(0deg) rotateY(0deg) scale3d(1, 1, 1)\");\n        }));\n    }, [\n        P,\n        K,\n        he,\n        J,\n        v,\n        b,\n        ce\n    ]), Be = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((i, p)=>{\n        if (!p) return;\n        if ($) {\n            G.current = {\n                offsetX: i.x / window.innerWidth,\n                offsetY: i.y / window.innerHeight\n            };\n            return;\n        }\n        const S = p.getBoundingClientRect();\n        if (!S.width || !S.height) return;\n        const Ve = ot(i.x, S.left, S.right), e = ot(i.y, S.top, S.bottom), t = (Ve - S.left) / S.width, r = (e - S.top) / S.height;\n        G.current = {\n            offsetX: t,\n            offsetY: r\n        };\n    }, [\n        $\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(Je, ()=>({\n            tilt: ce,\n            reset: ve,\n            angle: ()=>me(!1),\n            updateWillChange: le,\n            element: _e.current\n        }), [\n        ce,\n        ve,\n        le,\n        me\n    ]);\n    const $e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        A || (xe.current = !0, le(), fe());\n    }, [\n        A,\n        fe,\n        le\n    ]), Ye = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        A || (D && !$ && (typeof D == \"boolean\" ? document.body.style.overflow = \"hidden\" : D.style.overflow = \"hidden\"), xe.current = !0, le(), fe());\n    }, [\n        D,\n        A,\n        $,\n        fe,\n        le\n    ]), Pe = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((i)=>{\n        A || (Be({\n            x: i.clientX,\n            y: i.clientY\n        }, i.currentTarget), de(me()), pe(), Le());\n    }, [\n        A,\n        me,\n        Be,\n        de,\n        pe,\n        Le\n    ]), Ce = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((i)=>{\n        if (A) return;\n        const p = i.changedTouches[0];\n        p && (Be({\n            x: p.clientX,\n            y: p.clientY\n        }, i.currentTarget), de(me()), pe(), Le());\n    }, [\n        A,\n        me,\n        Be,\n        de,\n        pe,\n        Le\n    ]), Xe = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        A || (xe.current = !1, le(!1), fe(!1), N && ve());\n    }, [\n        A,\n        ve,\n        N,\n        fe,\n        le\n    ]), We = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        A || (D && !$ && (typeof D == \"boolean\" ? document.body.style.overflow = \"\" : D.style.overflow = \"\"), xe.current = !1, le(!1), fe(!1), N && ve());\n    }, [\n        D,\n        A,\n        $,\n        ve,\n        N,\n        fe,\n        le\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!I && !$) return;\n        let i;\n        $ || !I ? i = [\n            document\n        ] : i = Array.isArray(I) ? I : [\n            I\n        ];\n        for (let p of i){\n            const S = Xt(p);\n            S && (p = S, p.addEventListener(\"mouseenter\", $e), p.addEventListener(\"mousemove\", Pe), p.addEventListener(\"mouseleave\", Xe), p.addEventListener(\"touchstart\", Ye, {\n                passive: !0\n            }), p.addEventListener(\"touchmove\", Ce, {\n                passive: !0\n            }), p.addEventListener(\"touchend\", We, {\n                passive: !0\n            }));\n        }\n        return ()=>{\n            for (let p of i){\n                const S = Xt(p);\n                S && (p = S, p.removeEventListener(\"mouseenter\", $e), p.removeEventListener(\"mousemove\", Pe), p.removeEventListener(\"mouseleave\", Xe), p.removeEventListener(\"touchstart\", Ye), p.removeEventListener(\"touchmove\", Ce), p.removeEventListener(\"touchend\", We));\n            }\n        };\n    }, [\n        I,\n        $e,\n        Pe,\n        Xe,\n        Ye,\n        Ce,\n        We,\n        $\n    ]);\n    const Ue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((i)=>{\n        if (xe.current || i.beta === null && i.gamma === null) return;\n        let p = z && i.beta ? ot(-i.beta, -z, z) : P || 0, S = V && i.gamma ? ot(i.gamma, -V, V) : K || 0;\n        Oe && (p = -p, S = -S), ce({\n            angleX: p,\n            angleY: S\n        }, !1, !0);\n    }, [\n        z,\n        V,\n        P,\n        K,\n        Oe,\n        ce\n    ]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!(!z && !V)) return window.addEventListener(\"deviceorientation\", Ue), ()=>window.removeEventListener(\"deviceorientation\", Ue);\n    }, [\n        z,\n        V,\n        Ue,\n        le\n    ]), /* @__PURE__ */ it.jsx(\"div\", {\n        ref: (i)=>{\n            i && (_e.current = i, G.current && (A ? ve() : ce(me())), (P || K) && !G.current && ve());\n        },\n        \"data-testid\": W ? \"container\" : void 0,\n        style: Object.assign({\n            display: \"inline-block\",\n            verticalAlign: \"middle\",\n            width: o,\n            height: u,\n            borderRadius: k,\n            perspective: d,\n            transformStyle: Ae ? \"preserve-3d\" : void 0,\n            backfaceVisibility: \"hidden\",\n            filter: A ? ye : void 0,\n            transition: j === \"drop\" ? ne : void 0\n        }, Fe),\n        onMouseEnter: H ? w ? (i)=>{\n            $e(), w(i);\n        } : $e : w,\n        onTouchStart: H ? T ? (i)=>{\n            Ye(), T(i);\n        } : Ye : T,\n        onMouseMove: H ? oe ? (i)=>{\n            Pe(i), oe(i);\n        } : Pe : oe,\n        onTouchMove: H ? ke ? (i)=>{\n            Ce(i), ke(i);\n        } : Ce : ke,\n        onMouseLeave: H ? h ? (i)=>{\n            Xe(), h(i);\n        } : Xe : h,\n        onTouchEnd: H ? Re ? (i)=>{\n            We(), Re(i);\n        } : We : Re,\n        ...Qe,\n        children: /* @__PURE__ */ it.jsx(et, {\n            children: /* @__PURE__ */ it.jsxs(\"div\", {\n                ref: se,\n                \"data-testid\": W ? \"tilt\" : void 0,\n                style: Object.assign({\n                    boxSizing: \"border-box\",\n                    position: \"relative\",\n                    width: \"100%\",\n                    height: \"100%\",\n                    borderRadius: k,\n                    transformStyle: Ae ? \"preserve-3d\" : void 0,\n                    backfaceVisibility: \"hidden\",\n                    transition: ne,\n                    transform: \"rotateX(0deg) rotateY(0deg) scale3d(1, 1, 1)\"\n                }, ae),\n                className: ie,\n                ...De,\n                children: [\n                    Ie,\n                    Ne && /* @__PURE__ */ it.jsx(\"div\", {\n                        \"data-testid\": W ? \"spot-glare-container\" : void 0,\n                        style: {\n                            pointerEvents: \"none\",\n                            position: \"absolute\",\n                            inset: \"0\",\n                            borderRadius: k,\n                            overflow: \"hidden\",\n                            backfaceVisibility: \"hidden\",\n                            mixBlendMode: Ge\n                        },\n                        children: /* @__PURE__ */ it.jsx(\"div\", {\n                            ref: ee,\n                            \"data-testid\": W ? \"spot-glare\" : void 0,\n                            style: {\n                                position: \"absolute\",\n                                left: be === \"all\" && !J ? \"-50%\" : \"-100%\",\n                                top: be === \"all\" && !J ? \"-50%\" : \"-100%\",\n                                width: \"200%\",\n                                height: \"200%\",\n                                transition: ne,\n                                backgroundImage: `radial-gradient(${ze}, transparent ${Te}%)`,\n                                transform: Nt(J),\n                                opacity: J ? je : \"0\"\n                            }\n                        })\n                    }),\n                    f && /* @__PURE__ */ it.jsx(\"div\", {\n                        \"data-testid\": W ? \"line-glare-container\" : void 0,\n                        style: {\n                            pointerEvents: \"none\",\n                            position: \"absolute\",\n                            inset: \"0\",\n                            borderRadius: k,\n                            overflow: \"hidden\",\n                            backfaceVisibility: \"hidden\",\n                            mixBlendMode: Q\n                        },\n                        children: /* @__PURE__ */ it.jsx(\"div\", {\n                            \"data-testid\": W ? \"line-glare\" : void 0,\n                            ref: te,\n                            style: {\n                                position: \"absolute\",\n                                left: v ? \"-100%\" : 0,\n                                top: \"-50%\",\n                                width: \"200%\",\n                                height: \"200%\",\n                                filter: X ? `blur(${g})` : \"\",\n                                transition: ne,\n                                opacity: String(F),\n                                transform: Yt(he, v),\n                                backgroundImage: `linear-gradient(${Se === \"to-bottom-right\" ? \"to bottom right\" : \"to bottom left\"}, transparent, transparent ${qe}%, ${Me} calc(${qe}% + 1px), ${Me} ${Ke}%, transparent calc(${Ke}% + 1px), transparent 0%)`\n                            }\n                        })\n                    })\n                ]\n            })\n        })\n    });\n}), Gt = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(pr);\nGt.displayName = \"Tilt\";\nconst Wt = (o)=>{\n    if (o instanceof HTMLElement) return o;\n    if (o instanceof Document) return document;\n    if (o.current && o.current instanceof Object && \"element\" in o.current && o.current.element instanceof HTMLElement) return o.current.element;\n    if (o.current && o.current instanceof HTMLElement) return o.current;\n}, dr = (o, u)=>{\n    const k = o.split(u);\n    for (const _ of k)if (isNaN(Number(_))) return;\n    const d = k.length > 1 ? Number(k[0]) : 0, R = k.length > 1 ? Number(k[1]) : Number(k[0]);\n    return [\n        d,\n        R\n    ];\n}, _t = (o, u, k)=>{\n    o[u] = k;\n}, vr = (o, u, k, d, R, _, Y)=>{\n    const j = {\n        element: o,\n        transformInitial: o.style.transform\n    };\n    for (const f of u){\n        const X = o.getAttribute(`${k}-${f}`);\n        if (X) switch(f){\n            case \"offset\":\n                {\n                    const g = _ === \"all\" || _ === \"offset\";\n                    j.offset = Number(X) * Y.offset, g && (j.offset *= -1), j.transformInitial = j.transformInitial.replace(/translate[XY3d]*\\([^)]*\\)/g, \"\");\n                    break;\n                }\n            case \"opacity\":\n            case \"scale\":\n            case \"rotation\":\n            case \"skew\":\n                {\n                    const g = dr(X, d);\n                    if (!g) continue;\n                    const F = _ === \"all\" || _ === \"all-except-offset\" || _ === \"opacity\" && f === \"opacity\" || _ === \"scale\" && f === \"scale\" || _ === \"rotation\" && f === \"rotation\" || _ === \"skew\" && f === \"skew\";\n                    let x = F ? g[1] : g[0], Q = F ? g[0] : g[1];\n                    Y[f] !== 1 && (x *= Y[f], Q *= Y[f]), _t(j, f + \"Initial\", R === \"center-to-edge\" ? x : x + (Q - x) / 2), _t(j, f + \"Start\", x), _t(j, f + \"End\", Q), f === \"scale\" ? j.transformInitial = j.transformInitial.replace(/scale[XY3d]*\\([^)]*\\)/g, \"\") : f === \"rotation\" ? j.transformInitial = j.transformInitial.replace(/rotate[Z3d]*\\([^)]*\\)/g, \"\") : f === \"skew\" && (j.transformInitial = j.transformInitial.replace(/skew[XY3d]*\\([^)]*\\)/g, \"\"));\n                    break;\n                }\n        }\n    }\n    return j;\n}, bt = (o, u, k, d, R, _)=>{\n    if (_ === \"center-to-edge\") {\n        const Y = u ? Math.abs(o.angleX) / u : 0, j = k ? Math.abs(o.angleY) / k : 0;\n        return Math.max(Y, j) * (R - d) + d;\n    } else {\n        const Y = u ? o.angleX / u : 0, j = k ? o.angleY / k : 0;\n        return _ === \"edge-to-edge-x\" ? (j + 1) / 2 * (R - d) + d : _ === \"edge-to-edge-y\" ? (-Y + 1) / 2 * (R - d) + d : ((-Y + j) / 2 + 1) / 2 * (R - d) + d;\n    }\n}, yr = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ overflowHiddenEnable: o = !0, animationMode: u = \"center-to-edge\", animationReverse: k = \"none\", offsetMultiplier: d = 1, opacityMultiplier: R = 1, scaleMultiplier: _ = 1, rotationMultiplier: Y = 1, skewMultiplier: j = 1, disabled: f = !1, fullPageListening: X, controlElement: g, controlElementOnly: F, perspective: x = \"1200px\", scale: Q = 1.05, shadowEnable: Me = !0, shadow: he = \"0 0 1.5rem rgba(0, 0, 0, 0.5)\", CSSTransition: Se = \"all 0.3s ease-out\", spotGlareSizePercent: U = 100, spotGlarePosition: v = \"all\", children: Ne, tiltMaxAngleX: Te = 20, tiltMaxAngleY: je = 20, gyroMaxAngleX: Ge = 0, gyroMaxAngleY: be = 0, tiltStyle: ze = {}, onMouseEnter: Ee, onMouseLeave: J, onTouchStart: Z, onTouchEnd: B, onTilt: M, onReset: N, ...P }, K)=>{\n    const [D, Fe] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]), ae = !X && (!g || g && !F), ie = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), De = \"data-parallax\", z = \";\", V = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>[\n            \"offset\",\n            \"opacity\",\n            \"rotation\",\n            \"scale\",\n            \"skew\"\n        ], []), Oe = V.map((E)=>`[${De}-${E}]`).join(\", \"), A = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            offset: d,\n            opacity: R,\n            scale: _,\n            rotation: Y,\n            skew: j\n        }), [\n        d,\n        R,\n        Y,\n        _,\n        j\n    ]), ye = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((E = !0)=>{\n        requestAnimationFrame(()=>{\n            for (const b of D)if (!E) b.element.style.willChange = \"\";\n            else {\n                const w = [];\n                (b.offset || b.opacityInitial !== void 0 || b.scaleInitial !== void 0 || b.rotationInitial !== void 0 || b.skewInitial !== void 0) && w.push(\"transform\"), b.opacityInitial !== void 0 && w.push(\"opacity\"), b.element.style.willChange = w.join(\", \");\n            }\n        });\n    }, [\n        D\n    ]), ne = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((E, b = !1)=>{\n        for (const w of D){\n            const oe = b ? Ge : Te, h = b ? be : je;\n            let T = \"\", ke = w.opacityInitial;\n            if (w.offset) {\n                const Re = h ? E.angleY / h * w.offset : 0, Ie = oe ? -E.angleX / oe * w.offset : 0;\n                T += `translate(${Re}%, ${Ie}%)`;\n            }\n            if (w.rotationStart !== void 0 && w.rotationEnd !== void 0) {\n                const Re = bt(E, oe, h, w.rotationStart, w.rotationEnd, u);\n                T += ` rotate(${Re}deg)`;\n            }\n            if (w.scaleStart !== void 0 && w.scaleEnd !== void 0) {\n                const Re = bt(E, oe, h, w.scaleStart, w.scaleEnd, u);\n                T += ` scale(${Re})`;\n            }\n            if (w.skewStart !== void 0 && w.skewEnd !== void 0) {\n                const Re = bt(E, oe, h, w.skewStart, w.skewEnd, u);\n                T += ` skew(${Re}deg, ${Re}deg)`;\n            }\n            w.opacityStart !== void 0 && w.opacityEnd !== void 0 && (ke = bt(E, oe, h, w.opacityStart, w.opacityEnd, u)), w.transformInitial && (T += \" \" + w.transformInitial), requestAnimationFrame(()=>{\n                T && (w.element.style.transform = T), w.opacityStart !== void 0 && w.opacityEnd !== void 0 && (w.element.style.opacity = String(ke));\n            });\n        }\n    }, [\n        D,\n        u,\n        Te,\n        je,\n        Ge,\n        be\n    ]), ue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        requestAnimationFrame(()=>{\n            for (const E of D)E.element.style.transition = Se;\n        });\n    }, [\n        Se,\n        D\n    ]), $ = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        for (const E of D){\n            let b = \"\";\n            E.offset && (b += \"translate(0%, 0%)\"), E.rotationInitial !== void 0 && (b += ` rotate(${E.rotationInitial}deg)`), E.scaleInitial !== void 0 && (b += ` scale(${E.scaleInitial})`), E.skewInitial !== void 0 && (b += ` skew(${E.skewInitial}deg, ${E.skewInitial}deg)`), E.transformInitial && (b += \" \" + E.transformInitial), requestAnimationFrame(()=>{\n                b && (E.element.style.transform = b), E.opacityInitial !== void 0 && (E.element.style.opacity = String(E.opacityInitial));\n            });\n        }\n    }, [\n        D\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(K, ()=>ie.current ? {\n            ...ie.current,\n            updateWillChange: (E = !0)=>{\n                var b;\n                (b = ie.current) == null || b.updateWillChange(E), ye(E);\n            }\n        } : {\n            element: null,\n            angle: ()=>({\n                    angleX: 0,\n                    angleY: 0\n                }),\n            reset: ()=>{},\n            tilt: ()=>{},\n            updateWillChange: ()=>{}\n        }, // scale is needed because when it changes, the setTiltAngle function called by ref.tilt()\n    // in react-next-tilt is updated but here it's still pointing to the old function\n    [\n        ye,\n        Q\n    ]);\n    const I = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        f || ye();\n    }, [\n        f,\n        ye\n    ]), we = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        f || ye(!1);\n    }, [\n        f,\n        ye\n    ]), Ae = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((E, b)=>{\n        ne(E, b);\n    }, [\n        ne\n    ]), W = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        $();\n    }, [\n        $\n    ]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!g && !X) return;\n        let E;\n        X || !g ? E = [\n            document\n        ] : E = Array.isArray(g) ? g : [\n            g\n        ];\n        for (let b of E){\n            const w = Wt(b);\n            w && (b = w, b.addEventListener(\"mouseenter\", I), b.addEventListener(\"mouseleave\", we), b.addEventListener(\"touchstart\", I, {\n                passive: !0\n            }), b.addEventListener(\"touchend\", we));\n        }\n        return ()=>{\n            for (let b of E){\n                const w = Wt(b);\n                w && (b = w, b.removeEventListener(\"mouseenter\", I), b.removeEventListener(\"mouseleave\", we), b.removeEventListener(\"touchstart\", I), b.removeEventListener(\"touchend\", we));\n            }\n        };\n    }, [\n        g,\n        X,\n        I,\n        we\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        var E;\n        if (!((E = ie.current) != null && E.element)) return;\n        const b = [];\n        ie.current.element.querySelectorAll(Oe).forEach((w)=>{\n            b.push(vr(w, V, De, z, u, k, A)), w.style.transition = Se;\n        }), Fe(b);\n    }, [\n        Se,\n        u,\n        k,\n        Oe,\n        V,\n        A,\n        Ne\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        D.length !== 0 && ($(), ue());\n    }, [\n        ue,\n        D,\n        $\n    ]), /* @__PURE__ */ ir.jsx(Gt, {\n        ref: ie,\n        onMouseEnter: ae ? Ee ? (E)=>{\n            I(), Ee(E);\n        } : I : Ee,\n        onTouchStart: ae ? Z ? (E)=>{\n            I(), Z(E);\n        } : I : Z,\n        onMouseLeave: ae ? J ? (E)=>{\n            we(), J(E);\n        } : we : J,\n        onTouchEnd: ae ? B ? (E)=>{\n            we(), B(E);\n        } : we : B,\n        onTilt: M ? (E, b)=>{\n            Ae(E, b), M(E, b);\n        } : Ae,\n        onReset: N ? ()=>{\n            W(), N();\n        } : W,\n        disabled: f,\n        fullPageListening: X,\n        controlElement: g,\n        controlElementOnly: F,\n        perspective: x,\n        scale: Q,\n        shadowEnable: Me,\n        shadow: he,\n        CSSTransition: Se,\n        spotGlareSizePercent: U,\n        spotGlarePosition: v,\n        tiltMaxAngleX: Te,\n        tiltMaxAngleY: je,\n        tiltStyle: o ? Object.assign({\n            overflow: \"hidden\"\n        }, ze) : ze,\n        ...P,\n        children: Ne\n    });\n}), zt = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(yr);\nzt.displayName = \"Parallax\";\nconst Ut = (o)=>{\n    if (o instanceof HTMLElement) return o;\n    if (o instanceof Document) return document;\n    if (o.current && o.current instanceof Object && \"element\" in o.current && o.current.element instanceof HTMLElement) return o.current.element;\n    if (o.current && o.current instanceof HTMLElement) return o.current;\n}, mr = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ //\nfront: o = /* @__PURE__ */ rt.jsx(rt.Fragment, {}), back: u = /* @__PURE__ */ rt.jsx(rt.Fragment, {}), direction: k = \"horizontal\", borderRadius: d = \"8px\", borderWidth: R = \"2px\", borderColor: _ = \"white\", borderStyle: Y = \"solid\", shadowEnable: j = !0, mass: f = 0.5, stiffness: X = 120, flipped: g, flipReverse: F = !1, flipBackReverse: x = !1, type: Q = \"tilt\", disabled: Me = !1, overflowHiddenEnable: he = !1, testIdEnable: Se, fullPageListening: U, controlElement: v, controlElementOnly: Ne, tiltStyle: Te, onFlip: je, onFlipBack: Ge, onMouseEnter: be, onMouseMove: ze, onTouchMove: Ee, onMouseLeave: J, onTouchStart: Z, onTouchEnd: B, onKeyDown: M, onBlur: N, ...P }, K)=>{\n    const D = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(!1);\n    D.current = !!g;\n    const Fe = k === \"vertical\", ae = g !== void 0 || Me, ie = !U && (!v || v && !Ne), De = Q === \"tilt\" ? Vt : zt, z = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), V = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), Oe = g ? 0 : F ? 180 : -180, A = (0,framer_motion__WEBPACK_IMPORTED_MODULE_1__.useMotionValue)(Oe);\n    Q !== \"parallax\" && (delete P.animationMode, delete P.animationReverse, delete P.offsetMultiplier, delete P.opacityMultiplier, delete P.scaleMultiplier, delete P.rotationMultiplier, delete P.skewMultiplier);\n    const ye = Q === \"tilt\" ? {} : {\n        overflowHiddenEnable: he\n    }, ne = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            type: \"spring\",\n            mass: f,\n            stiffness: X\n        }), [\n        f,\n        X\n    ]), ue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((h = !0)=>{\n        V.current && (V.current.style.willChange = h ? \"transform\" : \"\");\n    }, []), $ = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        var h;\n        (h = z.current) != null && h.element && (ue(), requestAnimationFrame(()=>{\n            V.current && (V.current.style.pointerEvents = \"none\");\n        }), D.current ? (D.current = !1, Ge && Ge(z.current.element), await (0,framer_motion__WEBPACK_IMPORTED_MODULE_2__.animate)(A, !x && Math.abs(A.get()) < 90 ? -Oe : Oe, ne)) : (D.current = !0, je && je(z.current.element), !x && A.get() !== Oe && A.jump(Oe), await (0,framer_motion__WEBPACK_IMPORTED_MODULE_2__.animate)(A, 0, ne)), A.isAnimating() || (ue(!1), requestAnimationFrame(()=>{\n            V.current && (V.current.style.pointerEvents = \"\");\n        })));\n    }, [\n        ue,\n        je,\n        Ge,\n        x,\n        A,\n        ne,\n        Oe,\n        z\n    ]), I = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>D.current, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(K, ()=>z.current ? {\n            flip: $,\n            isFlipped: I,\n            ...z.current\n        } : {\n            flip: $,\n            isFlipped: I,\n            element: null,\n            angle: ()=>({\n                    angleX: 0,\n                    angleY: 0\n                }),\n            reset: ()=>{},\n            tilt: ()=>{},\n            updateWillChange: ()=>{}\n        }, [\n        $,\n        I\n    ]);\n    const we = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(({ element: h, side: T })=>typeof h == \"string\" ? /* @__PURE__ */ rt.jsx(\"img\", {\n            src: h,\n            alt: \"\",\n            \"data-testid\": Se ? T === \"front\" ? \"front-image\" : \"back-image\" : void 0,\n            loading: \"lazy\",\n            \"aria-hidden\": \"true\",\n            style: {\n                pointerEvents: \"none\",\n                touchAction: \"none\",\n                userSelect: \"none\",\n                display: \"block\",\n                verticalAlign: \"middle\",\n                width: \"100%\",\n                height: \"100%\",\n                backgroundSize: \"10px\"\n            }\n        }) : h), Ae = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({ children: h })=>/* @__PURE__ */ rt.jsxs(framer_motion__WEBPACK_IMPORTED_MODULE_3__.motion.div, {\n            ref: V,\n            \"data-testid\": Se ? \"motion\" : void 0,\n            style: {\n                display: \"grid\",\n                gridAutoRows: \"100%\",\n                width: \"100%\",\n                height: \"100%\",\n                borderRadius: d,\n                rotateX: Fe ? A : void 0,\n                rotateY: Fe ? void 0 : A,\n                transformStyle: \"preserve-3d\"\n            },\n            children: [\n                /* @__PURE__ */ rt.jsx(\"div\", {\n                    \"data-testid\": Se ? \"front-wrapper\" : void 0,\n                    style: {\n                        width: \"100%\",\n                        height: \"100%\",\n                        gridArea: \"1 / 1 / 1 / 1\",\n                        borderRadius: d,\n                        overflow: typeof o == \"string\" || he ? \"hidden\" : void 0,\n                        backfaceVisibility: \"hidden\",\n                        transformStyle: \"preserve-3d\",\n                        transform: Fe ? \"rotateX(180deg)\" : \"rotateY(180deg)\"\n                    },\n                    children: /* @__PURE__ */ rt.jsx(we, {\n                        element: o,\n                        side: \"front\"\n                    })\n                }),\n                h\n            ]\n        }), [\n        we,\n        d,\n        o,\n        Fe,\n        A,\n        Se,\n        he\n    ]), W = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        !ae && !D.current && $();\n    }, [\n        ae,\n        $\n    ]), E = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        !ae && D.current && $();\n    }, [\n        ae,\n        $\n    ]), b = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((h)=>{\n        h.cancelable && h.preventDefault(), !ae && D.current && $();\n    }, [\n        ae,\n        $\n    ]), w = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((h)=>{\n        let T = !1;\n        h.currentTarget instanceof HTMLElement && h.target instanceof HTMLElement && h.currentTarget !== h.target && h.currentTarget.contains(h.target) && (T = !0), (h.key === \" \" || h.key === \"Enter\") && !T && (h.preventDefault(), ae || $());\n    }, [\n        ae,\n        $\n    ]), oe = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((h)=>{\n        let T = !1;\n        h.currentTarget instanceof HTMLElement && h.relatedTarget instanceof HTMLElement && h.currentTarget !== h.relatedTarget && h.currentTarget.contains(h.relatedTarget) && (T = !0), !ae && D.current && !T && $();\n    }, [\n        ae,\n        $\n    ]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!v && !U) return;\n        let h;\n        U || !v ? h = [\n            document\n        ] : h = Array.isArray(v) ? v : [\n            v\n        ];\n        for (let T of h){\n            const ke = Ut(T);\n            ke && (T = ke, T.addEventListener(\"mouseenter\", W), T.addEventListener(\"mousemove\", W), T.addEventListener(\"mouseleave\", E), T.addEventListener(\"touchstart\", W, {\n                passive: !0\n            }), T.addEventListener(\"touchmove\", W, {\n                passive: !0\n            }), T.addEventListener(\"touchend\", b), T.addEventListener(\"keydown\", w, {\n                passive: !0\n            }), T.addEventListener(\"blur\", oe, {\n                passive: !0\n            }));\n        }\n        return ()=>{\n            for (let T of h){\n                const ke = Ut(T);\n                ke && (T = ke, T.removeEventListener(\"mouseenter\", W), T.removeEventListener(\"mousemove\", W), T.removeEventListener(\"mouseleave\", E), T.removeEventListener(\"touchstart\", W), T.removeEventListener(\"touchmove\", W), T.removeEventListener(\"touchend\", b), T.removeEventListener(\"keydown\", w), T.removeEventListener(\"blur\", oe));\n            }\n        };\n    }, [\n        W,\n        E,\n        b,\n        $,\n        w,\n        oe,\n        v,\n        U\n    ]), /* @__PURE__ */ rt.jsx(De, {\n        ref: z,\n        onMouseEnter: ie ? be ? (h)=>{\n            W(), be(h);\n        } : W : be,\n        onTouchStart: ie ? Z ? (h)=>{\n            W(), Z(h);\n        } : W : Z,\n        onMouseMove: ie ? ze ? (h)=>{\n            W(), ze(h);\n        } : W : ze,\n        onTouchMove: ie ? Ee ? (h)=>{\n            W(), Ee(h);\n        } : W : Ee,\n        onMouseLeave: ie ? J ? (h)=>{\n            E(), J(h);\n        } : E : J,\n        onTouchEnd: ie ? B ? (h)=>{\n            b(h), B(h);\n        } : b : B,\n        onKeyDown: ie ? M ? (h)=>{\n            w(h), M(h);\n        } : w : M,\n        onBlur: ie ? N ? (h)=>{\n            oe(h), N(h);\n        } : oe : N,\n        tiltStyle: Object.assign({\n            gridArea: \"1 / 1 / 1 / 1\",\n            width: \"100%\",\n            height: \"100%\"\n        }, Te),\n        TiltWrapper: Ae,\n        borderRadius: d,\n        disabled: Me,\n        testIdEnable: Se,\n        fullPageListening: U,\n        controlElement: v,\n        controlElementOnly: Ne,\n        shadowEnable: j,\n        ...ye,\n        ...P,\n        children: /* @__PURE__ */ rt.jsx(\"div\", {\n            \"data-testid\": Se ? \"back-wrapper\" : void 0,\n            style: {\n                boxSizing: \"border-box\",\n                width: \"100%\",\n                height: \"100%\",\n                borderRadius: d,\n                borderWidth: R,\n                borderStyle: Y,\n                borderColor: _,\n                overflow: typeof u == \"string\" || he ? \"hidden\" : void 0,\n                backfaceVisibility: \"hidden\",\n                transformStyle: \"preserve-3d\"\n            },\n            children: /* @__PURE__ */ rt.jsx(we, {\n                element: u,\n                side: \"back\"\n            })\n        })\n    });\n}), gr = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(mr);\ngr.displayName = \"FlipTilt\";\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-flip-tilt/dist/react-flip-tilt.js\n");

/***/ })

};
;