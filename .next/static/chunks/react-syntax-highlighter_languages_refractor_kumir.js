"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["react-syntax-highlighter_languages_refractor_kumir"],{

/***/ "(app-pages-browser)/./node_modules/refractor/lang/kumir.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/kumir.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n\nmodule.exports = kumir\nkumir.displayName = 'kumir'\nkumir.aliases = ['kum']\nfunction kumir(Prism) {\n  /* eslint-disable regexp/no-dupe-characters-character-class */\n  ;(function (Prism) {\n    /**\n     * Regular expression for characters that are not allowed in identifiers.\n     *\n     * @type {string}\n     */\n    var nonId = /\\s\\x00-\\x1f\\x22-\\x2f\\x3a-\\x3f\\x5b-\\x5e\\x60\\x7b-\\x7e/.source\n    /**\n     * Surround a regular expression for IDs with patterns for non-ID sequences.\n     *\n     * @param {string} pattern A regular expression for identifiers.\n     * @param {string} [flags] The regular expression flags.\n     * @returns {RegExp} A wrapped regular expression for identifiers.\n     */\n    function wrapId(pattern, flags) {\n      return RegExp(pattern.replace(/<nonId>/g, nonId), flags)\n    }\n    Prism.languages.kumir = {\n      comment: {\n        pattern: /\\|.*/\n      },\n      prolog: {\n        pattern: /#.*/,\n        greedy: true\n      },\n      string: {\n        pattern: /\"[^\\n\\r\"]*\"|'[^\\n\\r']*'/,\n        greedy: true\n      },\n      boolean: {\n        pattern: wrapId(/(^|[<nonId>])(?:да|нет)(?=[<nonId>]|$)/.source),\n        lookbehind: true\n      },\n      'operator-word': {\n        pattern: wrapId(/(^|[<nonId>])(?:и|или|не)(?=[<nonId>]|$)/.source),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'system-variable': {\n        pattern: wrapId(/(^|[<nonId>])знач(?=[<nonId>]|$)/.source),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      type: [\n        {\n          pattern: wrapId(\n            /(^|[<nonId>])(?:вещ|лит|лог|сим|цел)(?:\\x20*таб)?(?=[<nonId>]|$)/\n              .source\n          ),\n          lookbehind: true,\n          alias: 'builtin'\n        },\n        {\n          pattern: wrapId(\n            /(^|[<nonId>])(?:компл|сканкод|файл|цвет)(?=[<nonId>]|$)/.source\n          ),\n          lookbehind: true,\n          alias: 'important'\n        }\n      ],\n      /**\n       * Should be performed after searching for type names because of \"таб\".\n       * \"таб\" is a reserved word, but never used without a preceding type name.\n       * \"НАЗНАЧИТЬ\", \"Фввод\", and \"Фвывод\" are not reserved words.\n       */\n      keyword: {\n        pattern: wrapId(\n          /(^|[<nonId>])(?:алг|арг(?:\\x20*рез)?|ввод|ВКЛЮЧИТЬ|вс[её]|выбор|вывод|выход|дано|для|до|дс|если|иначе|исп|использовать|кон(?:(?:\\x20+|_)исп)?|кц(?:(?:\\x20+|_)при)?|надо|нач|нс|нц|от|пауза|пока|при|раза?|рез|стоп|таб|то|утв|шаг)(?=[<nonId>]|$)/\n            .source\n        ),\n        lookbehind: true\n      },\n      /** Should be performed after searching for reserved words. */\n      name: {\n        // eslint-disable-next-line regexp/no-super-linear-backtracking\n        pattern: wrapId(\n          /(^|[<nonId>])[^\\d<nonId>][^<nonId>]*(?:\\x20+[^<nonId>]+)*(?=[<nonId>]|$)/\n            .source\n        ),\n        lookbehind: true\n      },\n      /** Should be performed after searching for names. */\n      number: {\n        pattern: wrapId(\n          /(^|[<nonId>])(?:\\B\\$[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)(?=[<nonId>]|$)/\n            .source,\n          'i'\n        ),\n        lookbehind: true\n      },\n      /** Should be performed after searching for words. */\n      punctuation: /:=|[(),:;\\[\\]]/,\n      /**\n       * Should be performed after searching for\n       * - numeric constants (because of \"+\" and \"-\");\n       * - punctuation marks (because of \":=\" and \"=\").\n       */\n      'operator-char': {\n        pattern: /\\*\\*?|<[=>]?|>=?|[-+/=]/,\n        alias: 'operator'\n      }\n    }\n    Prism.languages.kum = Prism.languages.kumir\n  })(Prism)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWZyYWN0b3IvbGFuZy9rdW1pci5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9yZWZyYWN0b3IvbGFuZy9rdW1pci5qcz81ZGEwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGt1bWlyXG5rdW1pci5kaXNwbGF5TmFtZSA9ICdrdW1pcidcbmt1bWlyLmFsaWFzZXMgPSBbJ2t1bSddXG5mdW5jdGlvbiBrdW1pcihQcmlzbSkge1xuICAvKiBlc2xpbnQtZGlzYWJsZSByZWdleHAvbm8tZHVwZS1jaGFyYWN0ZXJzLWNoYXJhY3Rlci1jbGFzcyAqL1xuICA7KGZ1bmN0aW9uIChQcmlzbSkge1xuICAgIC8qKlxuICAgICAqIFJlZ3VsYXIgZXhwcmVzc2lvbiBmb3IgY2hhcmFjdGVycyB0aGF0IGFyZSBub3QgYWxsb3dlZCBpbiBpZGVudGlmaWVycy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdmFyIG5vbklkID0gL1xcc1xceDAwLVxceDFmXFx4MjItXFx4MmZcXHgzYS1cXHgzZlxceDViLVxceDVlXFx4NjBcXHg3Yi1cXHg3ZS8uc291cmNlXG4gICAgLyoqXG4gICAgICogU3Vycm91bmQgYSByZWd1bGFyIGV4cHJlc3Npb24gZm9yIElEcyB3aXRoIHBhdHRlcm5zIGZvciBub24tSUQgc2VxdWVuY2VzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdHRlcm4gQSByZWd1bGFyIGV4cHJlc3Npb24gZm9yIGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbZmxhZ3NdIFRoZSByZWd1bGFyIGV4cHJlc3Npb24gZmxhZ3MuXG4gICAgICogQHJldHVybnMge1JlZ0V4cH0gQSB3cmFwcGVkIHJlZ3VsYXIgZXhwcmVzc2lvbiBmb3IgaWRlbnRpZmllcnMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcElkKHBhdHRlcm4sIGZsYWdzKSB7XG4gICAgICByZXR1cm4gUmVnRXhwKHBhdHRlcm4ucmVwbGFjZSgvPG5vbklkPi9nLCBub25JZCksIGZsYWdzKVxuICAgIH1cbiAgICBQcmlzbS5sYW5ndWFnZXMua3VtaXIgPSB7XG4gICAgICBjb21tZW50OiB7XG4gICAgICAgIHBhdHRlcm46IC9cXHwuKi9cbiAgICAgIH0sXG4gICAgICBwcm9sb2c6IHtcbiAgICAgICAgcGF0dGVybjogLyMuKi8sXG4gICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHN0cmluZzoge1xuICAgICAgICBwYXR0ZXJuOiAvXCJbXlxcblxcclwiXSpcInwnW15cXG5cXHInXSonLyxcbiAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICB9LFxuICAgICAgYm9vbGVhbjoge1xuICAgICAgICBwYXR0ZXJuOiB3cmFwSWQoLyhefFs8bm9uSWQ+XSkoPzrQtNCwfNC90LXRgikoPz1bPG5vbklkPl18JCkvLnNvdXJjZSksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICAnb3BlcmF0b3Itd29yZCc6IHtcbiAgICAgICAgcGF0dGVybjogd3JhcElkKC8oXnxbPG5vbklkPl0pKD860Lh80LjQu9C4fNC90LUpKD89Wzxub25JZD5dfCQpLy5zb3VyY2UpLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBhbGlhczogJ2tleXdvcmQnXG4gICAgICB9LFxuICAgICAgJ3N5c3RlbS12YXJpYWJsZSc6IHtcbiAgICAgICAgcGF0dGVybjogd3JhcElkKC8oXnxbPG5vbklkPl0p0LfQvdCw0YcoPz1bPG5vbklkPl18JCkvLnNvdXJjZSksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGFsaWFzOiAna2V5d29yZCdcbiAgICAgIH0sXG4gICAgICB0eXBlOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwYXR0ZXJuOiB3cmFwSWQoXG4gICAgICAgICAgICAvKF58Wzxub25JZD5dKSg/OtCy0LXRiXzQu9C40YJ80LvQvtCzfNGB0LjQvHzRhtC10LspKD86XFx4MjAq0YLQsNCxKT8oPz1bPG5vbklkPl18JCkvXG4gICAgICAgICAgICAgIC5zb3VyY2VcbiAgICAgICAgICApLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgYWxpYXM6ICdidWlsdGluJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcGF0dGVybjogd3JhcElkKFxuICAgICAgICAgICAgLyhefFs8bm9uSWQ+XSkoPzrQutC+0LzQv9C7fNGB0LrQsNC90LrQvtC0fNGE0LDQudC7fNGG0LLQtdGCKSg/PVs8bm9uSWQ+XXwkKS8uc291cmNlXG4gICAgICAgICAgKSxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGFsaWFzOiAnaW1wb3J0YW50J1xuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgLyoqXG4gICAgICAgKiBTaG91bGQgYmUgcGVyZm9ybWVkIGFmdGVyIHNlYXJjaGluZyBmb3IgdHlwZSBuYW1lcyBiZWNhdXNlIG9mIFwi0YLQsNCxXCIuXG4gICAgICAgKiBcItGC0LDQsVwiIGlzIGEgcmVzZXJ2ZWQgd29yZCwgYnV0IG5ldmVyIHVzZWQgd2l0aG91dCBhIHByZWNlZGluZyB0eXBlIG5hbWUuXG4gICAgICAgKiBcItCd0JDQl9Cd0JDQp9CY0KLQrFwiLCBcItCk0LLQstC+0LRcIiwgYW5kIFwi0KTQstGL0LLQvtC0XCIgYXJlIG5vdCByZXNlcnZlZCB3b3Jkcy5cbiAgICAgICAqL1xuICAgICAga2V5d29yZDoge1xuICAgICAgICBwYXR0ZXJuOiB3cmFwSWQoXG4gICAgICAgICAgLyhefFs8bm9uSWQ+XSkoPzrQsNC70LN80LDRgNCzKD86XFx4MjAq0YDQtdC3KT980LLQstC+0LR80JLQmtCb0K7Qp9CY0KLQrHzQstGBW9C10ZFdfNCy0YvQsdC+0YB80LLRi9Cy0L7QtHzQstGL0YXQvtC0fNC00LDQvdC+fNC00LvRj3zQtNC+fNC00YF80LXRgdC70Lh80LjQvdCw0YfQtXzQuNGB0L980LjRgdC/0L7Qu9GM0LfQvtCy0LDRgtGMfNC60L7QvSg/Oig/OlxceDIwK3xfKdC40YHQvyk/fNC60YYoPzooPzpcXHgyMCt8XynQv9GA0LgpP3zQvdCw0LTQvnzQvdCw0Yd80L3RgXzQvdGGfNC+0YJ80L/QsNGD0LfQsHzQv9C+0LrQsHzQv9GA0Lh80YDQsNC30LA/fNGA0LXQt3zRgdGC0L7Qv3zRgtCw0LF80YLQvnzRg9GC0LJ80YjQsNCzKSg/PVs8bm9uSWQ+XXwkKS9cbiAgICAgICAgICAgIC5zb3VyY2VcbiAgICAgICAgKSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIC8qKiBTaG91bGQgYmUgcGVyZm9ybWVkIGFmdGVyIHNlYXJjaGluZyBmb3IgcmVzZXJ2ZWQgd29yZHMuICovXG4gICAgICBuYW1lOiB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWdleHAvbm8tc3VwZXItbGluZWFyLWJhY2t0cmFja2luZ1xuICAgICAgICBwYXR0ZXJuOiB3cmFwSWQoXG4gICAgICAgICAgLyhefFs8bm9uSWQ+XSlbXlxcZDxub25JZD5dW148bm9uSWQ+XSooPzpcXHgyMCtbXjxub25JZD5dKykqKD89Wzxub25JZD5dfCQpL1xuICAgICAgICAgICAgLnNvdXJjZVxuICAgICAgICApLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9LFxuICAgICAgLyoqIFNob3VsZCBiZSBwZXJmb3JtZWQgYWZ0ZXIgc2VhcmNoaW5nIGZvciBuYW1lcy4gKi9cbiAgICAgIG51bWJlcjoge1xuICAgICAgICBwYXR0ZXJuOiB3cmFwSWQoXG4gICAgICAgICAgLyhefFs8bm9uSWQ+XSkoPzpcXEJcXCRbXFxkYS1mXStcXGJ8KD86XFxiXFxkKyg/OlxcLlxcZCopP3xcXEJcXC5cXGQrKSg/OmVbKy1dP1xcZCspPykoPz1bPG5vbklkPl18JCkvXG4gICAgICAgICAgICAuc291cmNlLFxuICAgICAgICAgICdpJ1xuICAgICAgICApLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9LFxuICAgICAgLyoqIFNob3VsZCBiZSBwZXJmb3JtZWQgYWZ0ZXIgc2VhcmNoaW5nIGZvciB3b3Jkcy4gKi9cbiAgICAgIHB1bmN0dWF0aW9uOiAvOj18WygpLDo7XFxbXFxdXS8sXG4gICAgICAvKipcbiAgICAgICAqIFNob3VsZCBiZSBwZXJmb3JtZWQgYWZ0ZXIgc2VhcmNoaW5nIGZvclxuICAgICAgICogLSBudW1lcmljIGNvbnN0YW50cyAoYmVjYXVzZSBvZiBcIitcIiBhbmQgXCItXCIpO1xuICAgICAgICogLSBwdW5jdHVhdGlvbiBtYXJrcyAoYmVjYXVzZSBvZiBcIjo9XCIgYW5kIFwiPVwiKS5cbiAgICAgICAqL1xuICAgICAgJ29wZXJhdG9yLWNoYXInOiB7XG4gICAgICAgIHBhdHRlcm46IC9cXCpcXCo/fDxbPT5dP3w+PT98Wy0rLz1dLyxcbiAgICAgICAgYWxpYXM6ICdvcGVyYXRvcidcbiAgICAgIH1cbiAgICB9XG4gICAgUHJpc20ubGFuZ3VhZ2VzLmt1bSA9IFByaXNtLmxhbmd1YWdlcy5rdW1pclxuICB9KShQcmlzbSlcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/refractor/lang/kumir.js\n"));

/***/ })

}]);