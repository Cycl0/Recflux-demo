"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["react-syntax-highlighter_languages_refractor_javadoclike"],{

/***/ "(app-pages-browser)/./node_modules/refractor/lang/javadoclike.js":
/*!****************************************************!*\
  !*** ./node_modules/refractor/lang/javadoclike.js ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n\nmodule.exports = javadoclike\njavadoclike.displayName = 'javadoclike'\njavadoclike.aliases = []\nfunction javadoclike(Prism) {\n  ;(function (Prism) {\n    var javaDocLike = (Prism.languages.javadoclike = {\n      parameter: {\n        pattern:\n          /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:arg|arguments|param)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    })\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment'\n      var grammar = Prism.languages[lang]\n      if (!grammar) {\n        return\n      }\n      var token = grammar[tokenName]\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {}\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        }\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition)\n        token = grammar[tokenName]\n      }\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        }\n      }\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            }\n          }\n          callback(token[i])\n        }\n      } else {\n        callback(token)\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages]\n      }\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {}\n          }\n          pattern.inside.rest = docLanguage\n        })\n      })\n    }\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    })\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike)\n  })(Prism)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWZyYWN0b3IvbGFuZy9qYXZhZG9jbGlrZS5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsRUFBRTtBQUMzQjtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CLGdDQUFnQyxFQUFFLGlCQUFpQjtBQUNuRDtBQUNBLE9BQU87QUFDUCx1QkFBdUI7QUFDdkIsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFdBQVcsU0FBUyxpQkFBaUIsV0FBVztBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLE9BQU87QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxpQkFBaUI7QUFDaEMsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvamF2YWRvY2xpa2UuanM/NjRlOCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBqYXZhZG9jbGlrZVxuamF2YWRvY2xpa2UuZGlzcGxheU5hbWUgPSAnamF2YWRvY2xpa2UnXG5qYXZhZG9jbGlrZS5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGphdmFkb2NsaWtlKFByaXNtKSB7XG4gIDsoZnVuY3Rpb24gKFByaXNtKSB7XG4gICAgdmFyIGphdmFEb2NMaWtlID0gKFByaXNtLmxhbmd1YWdlcy5qYXZhZG9jbGlrZSA9IHtcbiAgICAgIHBhcmFtZXRlcjoge1xuICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgIC8oXltcXHQgXSooPzpcXC97M318XFwqfFxcL1xcKlxcKilcXHMqQCg/OmFyZ3xhcmd1bWVudHN8cGFyYW0pXFxzKylcXHcrL20sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICBrZXl3b3JkOiB7XG4gICAgICAgIC8vIGtleXdvcmRzIGFyZSB0aGUgZmlyc3Qgd29yZCBpbiBhIGxpbmUgcHJlY2VkZWQgYmUgYW4gYEBgIG9yIHN1cnJvdW5kZWQgYnkgY3VybHkgYnJhY2VzLlxuICAgICAgICAvLyBAd29yZCwge0B3b3JkfVxuICAgICAgICBwYXR0ZXJuOiAvKF5bXFx0IF0qKD86XFwvezN9fFxcKnxcXC9cXCpcXCopXFxzKnxcXHspQFthLXpdW2EtekEtWi1dK1xcYi9tLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9LFxuICAgICAgcHVuY3R1YXRpb246IC9be31dL1xuICAgIH0pXG4gICAgLyoqXG4gICAgICogQWRkcyBkb2MgY29tbWVudCBzdXBwb3J0IHRvIHRoZSBnaXZlbiBsYW5ndWFnZSBhbmQgY2FsbHMgYSBnaXZlbiBjYWxsYmFjayBvbiBlYWNoIGRvYyBjb21tZW50IHBhdHRlcm4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGFuZyB0aGUgbGFuZ3VhZ2UgYWRkIGRvYyBjb21tZW50IHN1cHBvcnQgdG8uXG4gICAgICogQHBhcmFtIHsocGF0dGVybjoge2luc2lkZToge3Jlc3Q6IHVuZGVmaW5lZH19KSA9PiB2b2lkfSBjYWxsYmFjayB0aGUgZnVuY3Rpb24gY2FsbGVkIHdpdGggZWFjaCBkb2MgY29tbWVudCBwYXR0ZXJuIGFzIGFyZ3VtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRvY0NvbW1lbnRTdXBwb3J0KGxhbmcsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgdG9rZW5OYW1lID0gJ2RvYy1jb21tZW50J1xuICAgICAgdmFyIGdyYW1tYXIgPSBQcmlzbS5sYW5ndWFnZXNbbGFuZ11cbiAgICAgIGlmICghZ3JhbW1hcikge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHZhciB0b2tlbiA9IGdyYW1tYXJbdG9rZW5OYW1lXVxuICAgICAgaWYgKCF0b2tlbikge1xuICAgICAgICAvLyBhZGQgZG9jIGNvbW1lbnQ6IC8qKiAqL1xuICAgICAgICB2YXIgZGVmaW5pdGlvbiA9IHt9XG4gICAgICAgIGRlZmluaXRpb25bdG9rZW5OYW1lXSA9IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvKF58W15cXFxcXSlcXC9cXCpcXCpbXi9dW1xcc1xcU10qPyg/OlxcKlxcL3wkKS8sXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICBhbGlhczogJ2NvbW1lbnQnXG4gICAgICAgIH1cbiAgICAgICAgZ3JhbW1hciA9IFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUobGFuZywgJ2NvbW1lbnQnLCBkZWZpbml0aW9uKVxuICAgICAgICB0b2tlbiA9IGdyYW1tYXJbdG9rZW5OYW1lXVxuICAgICAgfVxuICAgICAgaWYgKHRva2VuIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAgIC8vIGNvbnZlcnQgcmVnZXggdG8gb2JqZWN0XG4gICAgICAgIHRva2VuID0gZ3JhbW1hclt0b2tlbk5hbWVdID0ge1xuICAgICAgICAgIHBhdHRlcm46IHRva2VuXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHRva2VuKSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRva2VuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIGlmICh0b2tlbltpXSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgICAgICAgdG9rZW5baV0gPSB7XG4gICAgICAgICAgICAgIHBhdHRlcm46IHRva2VuW2ldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhbGxiYWNrKHRva2VuW2ldKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayh0b2tlbilcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBkb2MtY29tbWVudCBzdXBwb3J0IHRvIHRoZSBnaXZlbiBsYW5ndWFnZXMgZm9yIHRoZSBnaXZlbiBkb2N1bWVudGF0aW9uIGxhbmd1YWdlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXXxzdHJpbmd9IGxhbmd1YWdlc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkb2NMYW5ndWFnZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZFN1cHBvcnQobGFuZ3VhZ2VzLCBkb2NMYW5ndWFnZSkge1xuICAgICAgaWYgKHR5cGVvZiBsYW5ndWFnZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGxhbmd1YWdlcyA9IFtsYW5ndWFnZXNdXG4gICAgICB9XG4gICAgICBsYW5ndWFnZXMuZm9yRWFjaChmdW5jdGlvbiAobGFuZykge1xuICAgICAgICBkb2NDb21tZW50U3VwcG9ydChsYW5nLCBmdW5jdGlvbiAocGF0dGVybikge1xuICAgICAgICAgIGlmICghcGF0dGVybi5pbnNpZGUpIHtcbiAgICAgICAgICAgIHBhdHRlcm4uaW5zaWRlID0ge31cbiAgICAgICAgICB9XG4gICAgICAgICAgcGF0dGVybi5pbnNpZGUucmVzdCA9IGRvY0xhbmd1YWdlXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoamF2YURvY0xpa2UsICdhZGRTdXBwb3J0Jywge1xuICAgICAgdmFsdWU6IGFkZFN1cHBvcnRcbiAgICB9KVxuICAgIGphdmFEb2NMaWtlLmFkZFN1cHBvcnQoWydqYXZhJywgJ2phdmFzY3JpcHQnLCAncGhwJ10sIGphdmFEb2NMaWtlKVxuICB9KShQcmlzbSlcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/refractor/lang/javadoclike.js\n"));

/***/ })

}]);