const express = require('express');
const { chromium } = require('playwright');
const { AxeBuilder } = require('@axe-core/playwright');
const cors = require('cors');
const axios = require('axios');

const app = express();
const port = process.env.PORT || 3002;

app.use(cors()); // Enable CORS for all routes
app.use(express.json());

/**
 * Analyzes the current page state with Axe and captures screenshots.
 * Can capture the full page by scrolling or just the current viewport.
 */
async function analyzeAndScreenshot(page, fullPage = false) {
    console.log('Running analysis...');
    
    // Initialize accessibilityReport with a default empty structure
    let accessibilityReport = {
        violations: [],
        passes: [],
        incomplete: [],
        inapplicable: [],
        timestamp: new Date().toISOString(),
        url: await page.url()
    };
    
    // Ensure the page is ready for Axe analysis
    try {
        // Wait for the page to be in a ready state
        await page.evaluate(() => {
            return new Promise((resolve) => {
                // If document is already complete, resolve immediately
                if (document.readyState === 'complete') {
                    return resolve();
                }
                
                // Otherwise wait for the load event
                window.addEventListener('load', () => resolve());
                
                // Set a timeout just in case
                setTimeout(resolve, 5000);
            });
        });
        
        // Add a small delay to ensure any post-load scripts have run
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Try to run Axe analysis with retry logic
        let retries = 3;
        
        while (retries > 0) {
            try {
                // Create a new AxeBuilder instance and attach it to the page
                const axe = new AxeBuilder({ page })
                    .options({ runOnly: ['wcag2a', 'wcag2aa'] })
                    .withTags(['wcag2a', 'wcag2aa'])
                    .disableRules(['color-contrast']); // Disable rules that might be flaky
                
                accessibilityReport = await axe.analyze();
                console.log('Axe analysis completed successfully');
                break; // If successful, exit the retry loop
            } catch (axeError) {
                console.error(`Axe analysis failed (${retries} retries left): ${axeError.message}`);
                retries--;
                
                if (retries === 0) {
                    // If all retries failed, we'll use the default minimal report initialized above
                    console.log('All Axe analysis attempts failed, using minimal report');
                } else {
                    // Wait before retrying
                    await new Promise(resolve => setTimeout(resolve, 2000));
                }
            }
        }
    } catch (pageError) {
        console.error('Error preparing page for analysis:', pageError);
        // We'll use the default minimal report initialized above
    }
    
    // Capture screenshots
    const screenshots = [];
    try {
        console.log(`Capturing ${fullPage ? 'full page' : 'viewport'} screenshot...`);
        // Use Playwright's built-in fullPage option for reliability
        const screenshotData = await page.screenshot({
            encoding: 'base64',
            fullPage: fullPage // Directly use the flag
        });
        screenshots.push(screenshotData);
    } catch (screenshotError) {
        console.error('Error capturing screenshots:', screenshotError);
    }

    return { accessibilityReport, screenshots };
}

/**
 * Executes a single action from the user-defined list.
 */
async function executeAction(page, { action, selector, duration, text, scrollType, x, y }) {
    console.log(`Executing action: '${action}'`);

    const getElement = async (rawSel) => {
        const sel = rawSel.trim();
        const isXPath = sel.startsWith('//') || sel.startsWith('(/') || sel.startsWith('/');
        const playwrightSelector = isXPath ? `xpath=${sel}` : sel;
        const elementType = isXPath ? 'XPath' : 'CSS';

        console.log(`Searching for ${elementType} selector in all frames: ${sel}`);
        const frames = page.frames();
        const findPromises = frames.map(frame =>
            frame.waitForSelector(playwrightSelector, { timeout: 120000, visible: true })
            .then(element => {
                if (!element) return Promise.reject(new Error('Element not found'));
                console.log(`Element found in frame: ${frame.url()}`);
                return element;
            })
        );

        try {
            const element = await Promise.any(findPromises);
            await element.evaluate(el => el.scrollIntoView({ block: 'center' }));
            return element;
        } catch (error) {
            console.error('Element not found in any frame after waiting.', error);
            throw new Error(`Could not find a visible element with ${elementType} selector: ${sel} in any frame.`);
        }
    };

    switch (action) {
        case 'wait':
            if (typeof duration === 'number') {
                console.log(`Waiting for ${duration}ms`);
                await new Promise(resolve => setTimeout(resolve, duration));
            } else if (typeof selector === 'string') {
                console.log(`Waiting for selector: ${selector}`);
                await getElement(selector);
            } else {
                throw new Error(`'wait' action requires either a 'duration' or a 'selector' property.`);
            }
            break;

        case 'type':
            if (typeof selector !== 'string' || typeof text !== 'string') {
                throw new Error(`'type' action requires 'selector' and 'text' properties.`);
            }
            console.log(`Typing "${text}" into selector: ${selector}`);
            try {
                const elementToType = await getElement(selector);
                await elementToType.fill(text); // Use Playwright's robust fill method
                await page.waitForNetworkIdle({ idleTime: 1000, timeout: 120000 }).catch(e => 
                    console.log('Network did not reach idle state after typing, continuing anyway')
                );
            } catch (typeError) {
                console.error(`Error typing into element: ${typeError.message}`);
                throw new Error(`Failed to type text: ${typeError.message}`);
            }
            break;

        case 'click':
            if (typeof selector !== 'string') {
                throw new Error(`'click' action requires a 'selector' property.`);
            }
            console.log(`Clicking on selector: ${selector}`);
            try {
                const elementToClick = await getElement(selector);
                await elementToClick.click({ force: true, timeout: 60000 });
                await page.waitForNetworkIdle({ idleTime: 1000, timeout: 120000 }).catch(e =>
                    console.log('Network did not reach idle state after clicking, continuing anyway')
                );
            } catch (clickError) {
                console.error(`Error clicking element: ${clickError.message}`);
                throw new Error(`Failed to click element: ${clickError.message}`);
            }
            break;

        case 'scroll':
            if (!scrollType) {
                throw new Error(`'scroll' action requires a 'scrollType' property ('element', 'by', or 'to').`);
            }
            console.log(`Scrolling (type: ${scrollType})`);
            switch (scrollType) {
                case 'element':
                    if (typeof selector !== 'string') {
                        throw new Error(`'scroll' of type 'element' requires a 'selector' property.`);
                    }
                    await getElement(selector);
                    break;
                case 'by':
                    if (typeof x !== 'number' && typeof y !== 'number') {
                        throw new Error(`'scroll' of type 'by' requires an 'x' or 'y' numeric property.`);
                    }
                    console.log(`Scrolling by x: ${x}, y: ${y}`);
                    await page.evaluate(({ x, y }) => window.scrollBy(x || 0, y || 0), { x: Number(x) || 0, y: Number(y) || 0 });
                    break;
                case 'to':
                    if (typeof x !== 'number' && typeof y !== 'number') {
                        throw new Error(`'scroll' of type 'to' requires an 'x' or 'y' numeric property.`);
                    }
                    console.log(`Scrolling to x: ${x}, y: ${y}`);
                    await page.evaluate(({ x, y }) => window.scrollTo(x || 0, y || 0), { x: Number(x) || 0, y: Number(y) || 0 });
                    break;
                default:
                    throw new Error(`Unknown scrollType: ${scrollType}`);
            }
            await new Promise(resolve => setTimeout(resolve, 500));
            await page.waitForNetworkIdle({ idleTime: 500, timeout: 120000 }).catch(e =>
                console.log('Network did not reach idle state after scrolling, continuing anyway')
            );
            break;

        default:
            console.warn(`Unknown action type: ${action}`);
    }
}

/**
 * Runs a full test sequence on a single URL.
 */
async function runTestFlow(browser, url, resolution, actions = []) {
    const context = await browser.newContext();
    const page = await context.newPage();

    await page.setViewportSize(resolution);
    console.log(`Navigating to URL: ${url}`);
    await page.goto(url, { waitUntil: 'networkidle' }).catch(e => {
        console.warn(`Navigation to ${url} failed, but continuing. Error: ${e.message}`);
    });

    const results = [];

    // Initial analysis
    console.log('Running initial analysis...');
    const initialResult = await analyzeAndScreenshot(page, true);
    results.push({
        action: 'initial',
        ...initialResult
    });

    // Execute actions
    for (const action of actions) {
        await executeAction(page, action);
        const resultAfterAction = await analyzeAndScreenshot(page, true);
        results.push({
            action: action.action,
            selector: action.selector,
            ...resultAfterAction
        });
    }

    try {
        // Create a version of the results without the large screenshot data for Kafka
        const resultsForKafka = {
            url,
            resolution,
            actions, // Send actions for context
            states: results.map(state => {
                // Omit the 'screenshots' key
                const { screenshots, ...stateWithoutScreenshots } = state;
                return stateWithoutScreenshots;
            })
        };

        await axios.post('http://kafka-producer-service:3001/publish', resultsForKafka);
        console.log('Successfully published test results to Kafka service.');
    } catch (error) {
        console.error('Failed to publish test results to Kafka service:', error.message);
    }

    await context.close();
    return results;
}

app.post('/test-accessibility', async (req, res) => {
    const { urls, resolution, actions } = req.body;

    if (!Array.isArray(urls) || !urls.length || !resolution) {
        return res.status(400).json({ error: 'Request must include `urls` (array) and `resolution` object.' });
    }

    let browser;
    try {
        // Launch browser with additional options for stability
        console.log('Launching browser...');
        browser = await chromium.launch({ 
            headless: true, 
            args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-gpu',
                '--disable-web-security',
                '--disable-features=IsolateOrigins,site-per-process'
            ],
            timeout: 180000 // 3 minutes timeout for browser launch
        });
        
        const allResults = [];
        for (const url of urls) {
            console.log(`Starting test flow for URL: ${url}`);
            const states = await runTestFlow(browser, url, resolution, actions);
            allResults.push({ url, states });
        }
        res.status(200).json(allResults);
    } catch (error) {
        console.error('An error occurred during the test flow:', error);
        res.status(500).json({ 
            error: 'Failed to complete test flow.', 
            details: error.message,
            stack: error.stack
        });
    } finally {
        if (browser) {
            try {
                await browser.close();
                console.log('Browser closed successfully');
            } catch (closeError) {
                console.error('Error closing browser:', closeError);
            }
        }
    }
});

app.listen(port, () => {
    console.log(`Microservice listening on port ${port}`);
}); 